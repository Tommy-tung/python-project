機器學習是人工智慧的一個分支。人工智慧的研究歷史有著一條從以「推理」為重點，到以「知識」為重點，再到以「學習」為重點的自然、清晰的脈絡。顯然，機器學習是實現人工智慧的一個途徑，即以機器學習為手段解決人工智慧中的問題。機器學習在近30多年已發展為一門多領域交叉學科，涉及概率論、統計學、逼近論、凸分析（英語：Convex analysis）、計算複雜性理論等多門學科。機器學習理論主要是設計和分析一些讓電腦可以自動「學習」的演算法。機器學習演算法是一類從資料中自動分析獲得規律，並利用規律對未知資料進行預測的演算法。因為學習演算法中涉及了大量的統計學理論，機器學習與推斷統計學聯絡尤為密切，也被稱為統計學習理論。演算法設計方面，機器學習理論關注可以實現的，行之有效的學習演算法。很多推論問題屬於無程式可循難度，所以部分的機器學習研究是開發容易處理的近似演算法。
機器學習已廣泛應用於資料探勘、電腦視覺、自然語言處理、生物特徵辨識、搜尋引擎、醫學診斷、檢測信用卡欺詐、證券市場分析、DNA序列測序、語音和手寫辨識、戰略遊戲和機器人等領域。
機器學習有下面幾種定義：
一種經常參照的英文定義是：A computer program is said to learn from experience E with respect to some class of tasks T and performance measure P, if its performance at tasks in T, as measured by P, improves with experience E.
機器學習可以分成下面幾種類別：
監督學習和非監督學習的差別就是訓練集目標是否人標註。他們都有訓練集 且都有輸入和輸出
具體的機器學習演算法有：

人工智慧（英語：Artificial Intelligence，縮寫為AI）亦稱智械、機器智慧型，指由人製造出來的機器所表現出來的智慧型。通常人工智慧是指透過普通電腦程式來呈現人類智慧型的技術。該詞也指出研究這樣的智慧型系統是否能夠實現，以及如何實現。同時，通過醫學、神經科學、機器人學及統計學等的進步，常態預測則認為人類的無數職業也逐漸被其取代。[1][2]
人工智慧於一般教材中的定義領域是「智慧型主體（intelligent agent）的研究與設計」[3]，智慧型主體指一個可以觀察周遭環境並作出行動以達致目標的系統[4]。約翰·麥卡錫於1955年的定義是[5]「製造智慧型機器的科學與工程」[6]。安德烈亞斯·卡普蘭（Andreas Kaplan）和麥可·海恩萊因（Michael Haenlein）將人工智慧定義為「系統正確解釋外部資料，從這些資料中學習，並利用這些知識透過靈活適應實現特定目標和任務的能力」。[7]
人工智慧的研究是高度技術性和專業的，各分支領域都是深入且各不相通的，因而涉及範圍極廣[8]。人工智慧的研究可以分為幾個技術問題。其分支領域主要集中在解決具體問題，其中之一是，如何使用各種不同的工具完成特定的應用程式。
AI的核心問題包括建構能夠跟人類似甚至超卓的推理、知識、規劃、學習、交流、感知、移物、使用工具和操控機械的能力等[9]。人工智慧目前仍然是該領域的長遠目標[10]。目前強人工智慧已經有初步成果，甚至在一些影像辨識、語言分析、棋類遊戲等等單方面的能力達到了超越人類的水平，而且人工智慧的通用性代表著，能解決上述的問題的是一樣的AI程式，無須重新開發演算法就可以直接使用現有的AI完成任務，與人類的處理能力相同，但達到具備思考能力的統合強人工智慧還需要時間研究，比較流行的方法包括統計方法，計算智慧型和傳統意義的AI。目前有大量的工具應用了人工智慧，其中包括搜尋和數學最佳化、邏輯推演。而基於仿生學、認知心理學，以及基於概率論和經濟學的演算法等等也在逐步探索當中。
人工智慧的定義可以分為兩部分，即「人工」和「智慧」。「人工」即由人設計，為人創造、製造。
關於什麼是「智慧」，較有爭議性。這涉及到其它諸如意識、自我、心靈，包括無意識的精神等等問題。人唯一瞭解的智慧型是人本身的智慧型，這是普遍認同的觀點。但是我們對我們自身智慧型的理解都非常有限，對構成人的智慧型必要元素的瞭解也很有限，所以就很難定義什麼是「人工」製造的「智慧」了。因此人工智慧的研究往往涉及對人智慧型本身的研究。其它關於動物或其它人造系統的智慧型也普遍被認為是人工智慧相關的研究課題。
人工智慧目前在計算機領域內，得到了愈加廣泛的發揮。並在機器人、經濟政治決策、控制系統、仿真系統中得到應用。
目前人工智慧的研究方向已經被分成幾個子領域，研究人員希望一個人工智慧系統應該具有某些特定能力，以下將這些能力列出並說明。[9]
早期的人工智慧研究人員直接模仿人類進行逐步的推理，就像是玩棋盤遊戲或進行邏輯推理時人類的思考模式。[11]到了1980和1990年代，利用概率和經濟學上的概念，人工智慧研究還發展了非常成功的方法處理不確定或不完整的資訊。[12]
對於困難的問題，有可能需要大量的運算資源，也就是發生了「可能組合爆增」：當問題超過一定的規模時，電腦會需要天文數量級的記憶體或是運算時間。尋找更有效的演算法是優先的人工智慧研究專案。[13]
人類解決問題的模式通常是用最快捷、直觀的判斷，而不是有意識的、一步一步的推導，早期人工智慧研究通常使用逐步推導的方式。[14]人工智慧研究已經於這種「次表徵性的」解決問題方法取得進展：實體化Agent研究強調感知運動的重要性。神經網路研究試圖以類比人類和動物的大腦結構重現這種技能。
知識表示是人工智慧領域的核心研究問題之一，它的目標是讓機器儲存相應的知識，並且能夠按照某種規則推理演繹得到新的知識。有許多需要解決的問題需要大量的對世界的知識,這些知識包括事先儲存的先驗知識和透過智慧型推理得到的知識。事先儲存的先驗知識指：人類透過某種方式告訴給機器的知識。透過智慧型推理得到的知識指：結合先驗知識和某種特定的推理規則（邏輯推理）得到的知識。首先，先驗知識可以指描述目標，特徵，種類及物件之間的關係的知識， 也可以描述事件，時間，狀態，原因和結果， 以及任何知識你想要機器儲存的。比如：今天沒有太陽，沒有太陽就是陰天。那麼以命題邏輯語言，這些知識可以被表示為：今天-->沒有太陽， 沒有太陽-->陰天。這些知識是先驗知識，那麼透過推理可以得到新知識：今天-->陰天。由此例子可以看出，先驗知識的正確性非常重要，這個例子中沒有太陽就是陰天，這個命題是不嚴謹的、比較籠統的，因為沒有太陽可能是下雨，也可能下雪。邏輯命題表示在知識表示中非常重要，邏輯推理規則是目前主要推理規則。可以在機器中用邏輯符號定義每一個邏輯命題，然後再讓機器儲存相應的邏輯推理規則，那麼自然而然機器便可進行推理。目前知識表達有許多困境尚無法解決，比如：建立一個完備的知識庫幾乎不可能，所以知識庫的資源受到限制；先驗知識的正確性需要進行檢驗，而且先驗知識有時候不一定是只有對或者錯兩種選擇。
智慧型Agent必須能夠制定目標和實現這些目標。[15]他們需要一種方法來建立一個可預測的世界模型（將整個世界狀態用數學模型表現出來，並能預測它們的行為將如何改變這個世界），這樣就可以選擇功效最大的行為。[16]
在傳統的規劃問題中，智慧型Agent被假定它是世界中唯一具有影響力的，所以它要做出什麼行為是已經確定的。[17]但是，如果事實並非如此，它必須定期檢查世界模型的狀態是否和自己的預測相符合。如果不符合，它必須改變它的計劃。因此智慧型代理必須具有在不確定結果的狀態下推理的能力。[18]
在多Agent中，多個Agent規劃以合作和競爭的方式去完成一定的目標，使用演化演算法和群體智慧型可以達成一個整體的突現行為目標。[19]
機器學習的主要目的是為了讓機器從使用者和輸入資料等處獲得知識，從而讓機器自動地去判斷和輸出相應的結果。這一方法可以幫助解決更多問題、減少錯誤，提高解決問題的效率。對於人工智慧來說，機器學習從一開始就很重要。1956年，在最初的達特茅斯夏季會議上，雷蒙德·索洛莫諾夫[來源請求]寫了一篇關於不監視的概率性機器學習：一個歸納推理的機器。
機器學習的方法各種各樣，主要分為監督學習和非監督學習兩大類。監督學習指事先給定機器一些訓練樣本並且告訴樣本的類別，然後根據這些樣本的類別進行訓練，提取出這些樣本的共同屬性或者訓練一個分類器，等新來一個樣本，則通過訓練得到的共同屬性或者分類器進行判斷該樣本的類別。監督學習根據輸出結果的離散性和連續性，分為分類和回歸兩類。非監督學習是不給定訓練樣本，直接給定一些樣本和一些規則，讓機器自動根據一些規則進行分類。無論哪種學習方法都會進行誤差分析，從而知道所提的方法在理論上是否誤差有上限。
自然語言處理探討如何處理及運用自然語言，自然語言認知則是指讓電腦「懂」人類的語言。自然語言生成系統把計算機資料轉化為自然語言。自然語言理解系統把自然語言轉化為計算機程式更易於處理的形式。
機器感知[20]是指能夠使用感測器所輸入的資料（如照相機、麥克風、聲納以及其他的特殊感測器）然後推斷世界的狀態。計算機視覺[21]能夠分析影像輸入。另外還有語音識別[22]、臉部辨識和物體辨識。[23]
情感和社交技能對於一個智慧型agent是很重要的。首先，透過了解他們的動機和情感狀態，代理人能夠預測別人的行動（這涉及要素 博弈論、決策理論以及能夠塑造人的情感和情緒感知能力檢測）。此外，為了良好的人機互動，智慧型代理人也需要表現出情緒來。至少它必須出現禮貌地和人類打交道。至少，它本身應該有正常的情緒。
一個人工智慧的子領域，代表了理論（從哲學和心理學的角度）和實際（通過特定的實現產生的系統的輸出是可以考慮的創意，或系統識別和評估創造力）所定義的創造力。相關領域研究的包括了人工直覺和人工想像。
史蒂芬·霍金、比爾蓋茲、馬斯克、 Jaan Tallinn 以及 Nick Bostrom 等人都對於人工智慧技術的未來公開表示憂心[25]，人工智慧若在許多方面超越人類智慧型水平的智慧型、不斷更新、自我提升，進而取得控制管理權，人類是否有足夠的能力及時停止人工智慧領域的「軍備競賽」，能否保有最高掌控權，現有事實是：機器常失控導致人員傷亡，這樣的情況是否會更加擴大規模出現，歷史顯然無法給出可靠的樂觀答案。特斯拉電動車馬斯克（Elon Musk）在麻省理工學院（MIT）航空航天部門百年紀念研討會上稱人工智慧是「召喚惡魔」行為，英國發明家Clive Sinclair認為一旦開始製造抵抗人類和超越人類的智慧型機器，人類可能很難生存，蓋茲同意馬斯克和其它人所言，且不知道為何有些人不擔憂這個問題。[26]
DeepMind的人工智慧（AI）系統在2016年「AlphaGo」對戰南韓棋王李世乭獲勝，開發商表示在內部設立倫理委員會，針對人工智慧的應用制定政策，防範人工智慧淪為犯罪開發者。[27]
科技進步，人工智慧科技產生「自主武器」軍備競賽已悄悄展開，英國、以色列與挪威，都已部署自主飛彈與無人操控的無人機，具「射後不理」（fire-and-forget）能力的飛彈，多枚飛彈還可互相溝通，分享找到攻擊目標。這些武器還未被大量投入，但很快就會出現在戰場上，且並非使用人類所設計的程式，而是完全利用機器自行決策。 霍金等人在英國獨立報發表文章警告未來人工智慧可能會比人類金融市場、科學家、人類領袖更能操縱人心、甚至研發出人們無法理解的武器。專家恐發展到無法控制的局面，援引聯合國禁止研發某些特定武器的「特定常規武器公約」加以限制。[28]新南威爾斯大學人工智慧的沃爾什（Toby Walsh）教授認為這是一種欺騙，因為機器無區別戰敵和平民的技術。[29]
據CNN財經網數字媒體未來學家兼Webbmedia集團創始人艾米·韋伯（Amy Webb）；美國在線[30]...等紛紛預測一些即將被機器人取代的職業，日本野村總合研究所也與英國牛津大學的研究學者共同調查指出，10至20年後，日本有49%的職業(235種職業)可能會被機械和人工智慧取代而消失，直接影響約達2500萬人，[31]例如：超市店員、一般事務員、計程車司機、收費站運營商和收銀員、市場營銷人員、客服人員、製造業工人、金融中間人和分析師、新聞記者、電話公司職員、麻醉師、士兵和保安、律師、醫生、軟體開發者和操盤手、股票交易員等等高薪酬的腦力職業將最先受到衝擊[32]。
2017年6月份馬雲在美國底特律舉行「鏈結世界」（Gateway 17）產業大會，會上提出人工智慧可能導致第三次世界大戰，因為前兩次產業革命都導致兩次大戰，戰爭原因並非這些創新發明本身，而是發明對社會上許多人的生活方式衝擊處理不當，新科技在社會上產生新工作也取代舊工作，產生了新的輸家和贏家，若是輸家的人數太多將造成一股社會不穩的能量而這股能量被有心人利用可能導致各種事件。他認為各國應該強制訂定規定AI機器只能用於人類不能做的工作，避免短時間大量人類被取代的失業大潮，但馬雲沒有提出這種世界性規定將如何實現並確保遵守的細節方案。[33]
資料科學和人工智慧被哈佛商業評論稱為《二十一世紀最Sexy的職業》[34]，人工智慧需求量大，鼓勵了不少大學諸如伯克利大學專門成立資料科學系。矽谷和紐約為主的《The Data Incubator（英語：The Data Incubator）》公司於2012年成立，焦點是資料科學，巨量資料，和人工智慧企業培訓，提供國際巨量資料培訓服務。
此議題目前分成兩個學派：
此學派的代表是天文物理學家史蒂芬·霍金(Stephen Hawking)，以及特斯拉執行長伊隆·馬斯克(Elon Musk)。霍金認為AI對人類將來有很大的威脅，主要有以下理由：
主要是Google、Facebook等AI的主要技術發展者，他們對AI持樂觀看法的理由：
AI逐漸普及後，將會在企業管理中扮演很重要的角色，而人類的管理者應如何適度的調整自己的工作職能，有以下幾點建議：
[35]
人工智慧的一個比較流行的定義，也是該領域較早的定義，是由當時麻省理工學院的約翰·麥卡錫在1956年的達特矛斯會議上提出的：人工智慧就是要讓機器的行為看起來就像是人所表現出的智慧型行為一樣。但是這個定義似乎忽略了強人工智慧的可能性（見下）。另一個定義指人工智慧是人造機器所表現出來的智慧型。總體來講，目前對人工智慧的定義大多可劃分為四類，即機器「像人一樣思考」、「像人一樣行動」、「理性地思考」和「理性地行動」。這裡「行動」應廣義地理解為採取行動，或制定行動的決策，而不是肢體動作。
強人工智慧觀點認為「有可能」製造出「真正」能推理和解決問題的智慧型機器，並且，這樣的機器將被認為是具有知覺、有自我意識的。強人工智慧可以有兩類：
弱人工智慧觀點認為「不可能」製造出能「真正」地推理和解決問題的智慧型機器，這些機器只不過「看起來」像是智慧型的，但是並不真正擁有智慧型，也不會有自主意識。
弱人工智慧是對比強人工智慧才出現的，因為人工智慧的研究一度處於停滯不前的狀態下，直到類神經網路有了強大的運算能力加以類比後，才開始改變並大幅超前。但人工智慧研究者不一定同意弱人工智慧，也不一定在乎或者了解強人工智慧和弱人工智慧的內容與差別，對定義爭論不休。
就當下的人工智慧研究領域來看，研究者已大量造出「看起來」像是智慧型的機器，取得相當豐碩的理論上和實質上的成果，如2009年康乃爾大學教授Hod Lipson 和其博士研究生Michael Schmidt 研發出的 Eureqa電腦程式，只要給予一些資料，這電腦程式自己只用幾十個小時計算就推論出牛頓花費多年研究才發現的牛頓力學公式，等於只用幾十個小時就自己重新發現牛頓力學公式，這電腦程式也能用來研究很多其他領域的科學問題上。這些所謂的弱人工智慧在神經網路發展下已經有巨大進步，但對於要如何整合成強人工智慧，現在還沒有明確定論。
主條目：人工智慧哲學、圖靈測試、物理符號系統、皇帝新腦、德雷福斯對人工智慧的看法（英語：Hubert Dreyfus's views on artificial intelligence）、AI效應（英語：AI effect）
「強人工智慧」一詞最初是約翰·羅傑斯·希爾勒針對計算機和其它資訊處理機器創造的，其定義為：
「強人工智慧觀點認為計算機不僅是用來研究人的思維的一種工具；相反，只要執行適當的程式，計算機本身就是有思維的。」（J Searle in Minds Brains and Programs. The Behavioral and Brain Sciences, vol. 3, 1980）
關於強人工智慧的爭論，不同於更廣義的一元論和二元論的爭論。其爭論要點是：如果一台機器的唯一工作原理就是轉換編碼資料，那麼這台機器是不是有思維的？希爾勒認為這是不可能的。他舉了個中文房間的例子來說明，如果機器僅僅是轉換資料，而資料本身是對某些事情的一種編碼表現，那麼在不理解這一編碼和這實際事情之間的對應關係的前提下，機器不可能對其處理的資料有任何理解。基於這一論點，希爾勒認為即使有機器通過了圖靈測試，也不一定說明機器就真的像人一樣有自我思維和自由意識。
也有哲學家持不同的觀點。丹尼爾·丹尼特在其著作《意識的解釋（英語：Consciousness Explained）》（Consciousness Explained）裡認為，人也不過是一台有靈魂的機器而已，為什麼我們認為：「人可以有智慧型，而普通機器就不能」呢？他認為像上述的資料轉換機器是有可能有思維和意識的。
有的哲學家認為如果弱人工智慧是可實現的，那麼強人工智慧也是可實現的。比如西蒙·布萊克本（英語：Simon Blackburn）（Simon Blackburn）在其哲學入門教材Think裡說道，一個人的看起來是「智慧型」的行動並不能真正說明這個人就真的是智慧型的。我永遠不可能知道另一個人是否真的像我一樣是智慧型的，還是說她／他僅僅是「看起來」是智慧型的。基於這個論點，既然弱人工智慧認為可以令機器「看起來」像是智慧型的，那就不能完全否定這機器是真的有智慧型的。布萊克本認為這是一個主觀認定的問題。
需要指出的是，弱人工智慧並非和強人工智慧完全對立，也就是說，即使強人工智慧是可能的，弱人工智慧仍然是有意義的。至少，今日的計算機能做的事，像算術運算等，在一百多年前是被認為很需要智慧型的。並且，即使強人工智慧被證明為可能的，也不代表強人工智慧必定能被研製出來。
目前沒有統一的原理或範式指導人工智慧研究。許多問題上研究者都存在爭論。[36]
其中幾個長久以來仍沒有結論的問題是：是否應從心理或神經方面類比人工智慧?或者像鳥類生物學對於航空工程一樣，人類生物學對於人工智慧研究是沒有關係的？[37]智慧型行為能否用簡單的原則（如邏輯或最佳化）來描述？還是必須解決大量完全無關的問題？[38]
智慧型是否可以使用進階符號表達，如詞和想法？還是需要「子符號」的處理？[39]
約翰·豪格蘭德（John Haugeland）提出了GOFAI（出色的老式人工智慧）的概念，也提議人工智慧應歸類為synthetic intelligence（英語：synthetic intelligence），[40]這個概念後來被某些非GOFAI研究者採納。[41][42]
20世紀40年代到50年代，許多研究者探索神經學、資訊理論及控制論之間的聯絡。其中還造出一些使用電子網路絡構造的初步智慧型，如格雷·華特（W. Grey Walter）的烏龜（turtle）和約翰霍普金斯野獸。
這些研究者還經常在普林斯頓大學和英國的Ratio Club舉行技術協會會議。[43]直到1960，大部分人已經放棄這個方法，儘管在80年代再次提出這些原理。
當20世紀50年代，數位電腦研製成功，研究者開始探索人類智慧型是否能簡化成符號處理。研究主要集中在卡內基梅隆大學，史丹福大學和麻省理工學院，而各自有獨立的研究風格。約翰·豪格蘭德（John Haugeland）稱這些方法為GOFAI（出色的老式人工智慧）[44]。60年代，符號方法在小型證明程式上類比進階思考有很大的成就。基於控制論或神經網路的方法則置於次要[45]。60－70年代的研究者確信符號方法最終可以成功創造強人工智慧的機器，同時這也是他們的目標。
1980年代符號人工智慧停滯不前，很多人認為符號系統永遠不可能模仿人類所有的認知過程，特別是感知、機器人、機器學習和圖型識別。很多研究者開始關注子符號方法解決特定的人工智慧問題[39]。
1990年代，人工智慧研究發展出複雜的數學工具來解決特定的分支問題。這些工具是真正的科學方法，即這些方法的結果是可測量的和可驗證的，同時也是近期人工智慧成功的原因。共享的數學語言也允許已有學科的合作（如數學，經濟或運籌學）。Stuart J. Russell和Peter Norvig指出這些進步不亞於「革命」和「neats的成功」[57]。有人批評這些技術太專注於特定的問題，而沒有考慮長遠的強人工智慧目標[58]。
人工智慧基本的應用可分為四大部分：
指的是人類透過感官所收到環境的刺激，察覺訊息的能力，簡單的說就是人類五官的看、聽、說、讀、寫等能力，學習人類的感知能力是AI目前主要的焦點之一，包括：
指的是人類透過學習、判斷、分析等等心理活動來瞭解訊息、獲取知識的過程與能力，對人類認知的模仿與學習也是目前AI第二個焦點領域，主要包括：
指的是人類產生新思想，新發現，新方法，新理論，新設計，創造新事物的能力，它是結合知識、智力、能力、個性及潛意識等各種因素最佳化而成，這個領域目前人類仍遙遙領先AI，但AI也試著急起直追，主要領域包括：AI作曲、AI作詩、AI小說、AI繪畫、AI設計等。
指的是人類深刻瞭解人、事、物的真相，能探求真實真理、明辨是非，指導人類可以過著有意義生活的一種能力，這個領域牽涉人類自我意識、自我認知與價值觀，是ˋ目前AI尚未觸及的一部分，也是人類最難以模仿的一個領域。
[60]
機器視覺、指紋辨識、臉部辨識、視網膜辨識、虹膜辨識、掌紋辨識、專家系統、自動規劃等。
人工智慧是一門邊緣學科，屬於自然科學和社會科學的交叉。

推理是「使用理智從某些前提產生結論」的行動。以下三種推理是屬於哲學、邏輯、心理學和人工智慧等學門所感興趣的領域。
邏輯推理有三種主要的方式：
演繹推理（deductive reasoning），給出正確的前提，就必然推出結論（結論不能為假）。演繹推理無法使知識擴增，因為結論自包含於前提之內。邏輯學中有名的三段論（syllogism）就是典型的例子：
另一方面，在歸納推理（inductive reasoning）當中，當前提為真時，可推出某種機率性的結論。歸納推理可以擴展知識，因為結論比前提包含更多的信息。大衛·休謨（David Hume）曾舉出一個歸納推理的範例[1]：
第三類推理是溯因推理（abductive reasoning），或者說推論到最佳解釋。這種推理方法的結構較為複雜而且可能包括演繹與歸納兩種論證。溯因推理的主要特徵是給出一組或多或少有爭議的假定，要麼證偽其它可能的解釋，要麼展示出贊成的結論的可能性，來嘗試贊成多個結論中的一個。

知識是對某個主題確信的認識，並且這些認識擁有潛在的能力為特定目的而使用。意指透過經驗或聯想，而能夠熟悉進而了解某件事情；這種事實或狀態就稱為知識，其包括認識或了解某種科學、藝術或技巧。此外，亦指透過研究、調查、觀察或經驗而獲得的一整套知識或一系列資訊[1]。認知事物的能力是哲學中充滿爭議的中心議題之一，並且擁有它自己的分支—知識論。從更加實用的層次來看，知識通常被某些人的群體所共享，在這種情況下，知識可以通過不同的方式來操作和管理。
儘管知識是日常生活裡的中心組成部分，但知識的確切定義仍然是哲學家、社會科學家和歷史學家有著極大興趣的話題。根據傳統知識分析，知識具備三個特徵：被證實的（justified）、真的（true）和被相信的（believed）。古希臘時期，知識被認為是通往真理的途徑；文藝復興至今，對知識看法逐漸轉變成一種相對的工具。
描述知識的用法是考察知識的一種常見做法。在這種意義上，知識是由不同意向討論著的信息。DIKW體系將數據、信息、知識、智慧納入到一種金字塔形的層次體系中，而這個模型與DIKW體系是一致的。
Purser & Pasmore認為要精確地定義知識是非常困難的。例如：何謂知識？如何獲取知識？何者是有效的知識？這些問題是非常難回答的，但若無法回答知識是什麼，將難以設計能產生更多知識及有效利用知識的組織。因此，Purser & Pasmore則將知識定義為：「用以制定決策的事實、模式、基模、概念、意見、及直覺的集合體。」Badaracco將知識定義為：從人類活動中所獲取的真理、原則、思想及資訊。日本學者田中郁次郎則認為知識是一種多元的概念，具有多層次的意義。知識牽涉到信仰、承諾與行動等，可分為內隱與外顯知識。何光國則認為知識是一、經驗累積的紀錄；二、事實組織的系統化；三、對事實的理解；四、一種理解的行為或狀態；五、人的已知和未知。此外Davenport，依據知識的特性指出，知識是一種流動性質的綜合體，其中包括：結構化的經驗、價值及經過文字化的資訊，而且還包括專家獨特的見解，為新經驗的評估、整合與資訊等提供架構。
由上述可知，知識是抽象的，是傳達概念的一種形式。例如：古代的結繩記事、白旗示降等，都是藉由結繩、白旗等符號來傳達概念。但是當人類活動越是頻繁，則簡單的符號就不足傳達雙方的意念。因此，有了文字、語言等符號興起以作為溝通的工具。在溝通過程中還是需要經過思考，最後才能產生出知識。由此可知，知識就是經由前人的經驗累積形成的。
幾位學者對知識的定義：
Quinn（1996）：知識是存在於專業人員身上的技能財產，可分為：實證知識、高級技能、系統認知、自我激勵創造力等。
Harris(1996):知識是資訊、文化脈絡及經驗的組合。
Qunitas(1997):知識是企業無形資產。
Nonaka(1994):當訊息（message）被賦予意義後，就成為資訊（information），而資訊再經過整理後，才轉化為知識（knowledge）。知識是人類理解與學習的結果。
知識管理尋求理解組織內知識被使用和交換（trade）的方式，並且將知識理解為自我引用（self-referential）與遞歸（recursive）的。這裡遞歸的意思是指知識的定義處在一種不斷變動的狀態之中。知識管理認為知識是一種浸潤著經驗的信息；而信息與特定的觀察相關，它是導致觀察者發現變化的數據；數據可以被觀察，但並不需要如此。
情境知識是關於特定情景的知識。想像兩種非常相似的蘑菇，它們分別生長於山峰的不同的一側，一種是有營養的，另一種是有毒的；在山峰這一側獲得的食用蘑菇的知識，並不適用於在山峰另一側使用。
通過諸如試錯法這樣的方法來產生的知識，或者通過經驗來學習到的知識，都傾向於是一種情境知識。而通過科學方法產生的知識比其他方法產生的知識更加不情景化，這也是科學方法的優點之一。
情境知識通常嵌入在一種語言、文化或者傳統中。有一種觀點對文化帝國主義進行批判，認為全球單一文化（monoculture）的上升導致了地方性知識（local knowledge）的消失。
知識的某些方面展現出了它的社會特性。比如，知識是某種形式的社會資本（social capital）。知識的社會學將檢驗社會和知識如何互動。
通過經驗、觀察和推理，個體或者文化獲得了知識。知識的傳播已經被人類學的擴散理論所檢驗。發明的擴散理論探討了引導人們獲知、嘗試以及採納新觀點或者措施的各種因素。這一理論可以幫助我們解釋知識的發展。
異常心理學
行為遺傳學
生物心理學
心理藥物學
認知心理學
比較心理學
跨文化心理學
文化心理學
差異心理學（英語：Differential psychology）
發展心理學
演化心理學
實驗心理學
數學心理學
神經心理學
人格心理學
正面心理學
定量心理學（英語：Quantitative psychology）
社會心理學
應用行為分析
心理語言學
臨床心理學
社區心理學
消費行為
諮商心理學
批判社區心理學
教育心理學
環境心理學
人因工程學
法庭心理學
健康心理學
人本主義心理學
工業與組織心理學
本體解釋學（英語：Ontological hermeneutics）
法律心理學
經濟心理學
醫學心理學（英語：Medical psychology）
軍事心理學（英語：Military psychology）
音樂心理學（英語：Music psychology）
職業健康心理學（英語：Occupational health psychology）
政治心理學
宗教心理學
學校心理學（英語：School psychology）
運動心理學
交通心理學
心理學學科列表
心理學組織列表（英語：List of psychology organizations）
心理學家
心理治療列表（英語：List of psychotherapies）
重要著作列表（英語：List of important publications in psychology）
重要研究列表（英語：List of psychological research methods）
心理學學派列表
心理學的時間表（英語：Timeline of psychology）
心理學文章索引（英語：Index of psychology articles）
學習是透過外界教授或從自身經驗提高能力的過程。
學習最早可追溯至孔子在《論語》中所言：「學而時習之，不亦說乎？」意思是，學了之後及時、經常地進行溫習和實習，不是一件很愉快的事情嗎？很明顯，學習這一複合名詞，就是出自孔子的這一名言。按照孔子和其他中國古代教育家的看法，「學」就是聞、見與模仿，是獲得信息、技能，主要是指接受感官信息（圖像信息、聲音信息及觸覺味覺等等信息）與書本知識，有時還包括思想的含義。「學」是自學或有人教你學。「習」是鞏固知識、技能的行為，一般有三種含義：溫習、實習、練習。「學」偏重於思想意識的理論領域，「習」偏重於行動實習的實踐方面。學習就是獲得知識，形成技能，獲得適應環境改變環境的能力的過程。實質上就是學、思、習、行的總稱。學是指知識和經驗的累積，習是指知識和經驗的實踐。學屬知，習屬行。中國大儒王陽明曾提倡知行合一。
荀子在《勸學》中說道，「君子曰：學不可以已。」意思是，學習不可以停止，一定要持之以恆。
學習是外在環境刺激引起的行為的變化，要有可觀察、可測量的外在變化。古典制約和操作制約的研究。並且以個體獲得經驗為結果。[來源請求]
學習是內在傾向或能力的變化，內在變化與外顯行為並不完全一致。（當然內在的變化還必須由外在的變化來推測）
這種變化應是後天經驗習得的，不是先天的反應或者生理成熟的作用。
這種變化要能保持一段時期。[來源請求]
綜合兩大學派可以這樣來定義學習：學習是因經驗而引起的行為或內在傾向與能力較為持久的良性變化。[來源請求]
加涅把學習過程看作是由操作、執行控制和預期三個系統協同作用的過程。作業系統由受納器、感覺登記器、工作記憶（包括短時記憶）系統、長時記憶系統、反應生成器和反應器組成。執行控制系統對信息、表徵形式和加工策略的選擇都具有指導和監控作用。預期指人的信息加工活動受目的指引。認知目的引導著加工方式的選擇。認知加工活動的實現和預期目的的達到會帶來情感的滿足，由此進一步激勵新的認知活動。 
從加涅的學習與記憶的信息加工模型來看，知識的學習過程經歷著一個信息輸入—編碼—加工—貯存—提取—輸出的過程，根據這樣的信息流程和執行控制與預期系統的作用，加涅進一步把學習過程劃分成八個相互聯繫的階段：（1）動機階段；（2）領會階段；（3）獲得階段；（4）保持階段；（5）回憶階段；（6）概括階段；（7）動作階段，（8）反饋階段。加涅指出，與各個階段相應的心理狀態不是自發產生的，而是在教學影響下出現的。
梅耶是美國當代著名的認知心理學家，他提出了一個簡化的知識學習過程模型，該模型比較簡捷地描述了知識學習的基本過程。從外部看，學習過程的兩端是外部刺激（新知識）和可觀察或可測量的行為反應。從內部看，學習過程始於學習者的注意（A），注意使學習者的經驗指向於與當前學習任務有關的外界信息並激活相關的原有知識（B）；新知識進入工作記憶（短時記憶），當新知識進入工作記憶以後，學習者找出新知識各部分的內部聯繫(C)；然後學習者把新知識與原有的相關知識聯繫起來，找出新舊知識間的相同點和不同點(D)；最後，新學習的知識進入長時記憶（E）。
根據拉什利（K.S.Lashley）的腦功能整體說，學習活動的效率與大腦受損傷的面積及部位之間的關係為：與面積大小成反比，與部位無關。
參考 學習技巧。
Schacter, Daniel (2011). 「Pscyhology, Second Edition」
科際整合又稱交叉學科、跨領域研究，指的是兩個或多個學科相互合作，在同一個目標下進行的學術活動。
科際整合的項目通常源於對單一學科無法、或是無意對某些重要問題進行研究的認識。例如，社會科學學科中的人類學和社會學，通常並不重視研究科技進步對於社會的影響；因此，許多對此感興趣的社會科學家有意去參與科學與技術研究，晚近發展為「科學、科技與社會」（Science,Techonology and Society,STS）學門；此類多學科合作項目通常由不同領域的學者組成（如人類學、歷史學、哲學、社會學或者女性研究）。不過，也有不少科際整合起源於新的研究方向，如奈米科技等。只有在綜合了數個學科的知識和研究方法時，這些研究方向才有可能取得成功。例如，量子信息處理綜合了量子物理及計算機科學，而生物信息學則把分子生物學引入了計算機科學領域。
許多科學家認為，只有通過發展多個學科的整合，才能解決人類所面臨的不少棘手問題，如AIDS、傳染病、全球暖化以及生物多樣性殆失等等。另一方面，相對於當前學科過度專業化所造成的限制而言，科際整合也被視為一種矯正。
有一些學科模式時而也被稱為「科際整合」。在多學科組合（multidisciplinarity）模式下，多個學科的學者對同一個問題進行研究，試圖在各自領域的框架內對問題進行理解，而並不強調各個領域間的合作或是發展出共同的框架概念。這種模式類同於智囊團模式，其目標是解決一個迫切的問題，而非拓展學科視野。另一種模式為跨學科研究（transdisciplinarity），通過打破學科傳統規範的樊籬以取得更有啟發性的成果。一個例子是通過海量詞彙比較進行研究的諾斯特拉超語系和原世界語（Proto-World language）的項目，它們突破了傳統歷史語言學的音韻學手段。此外，還有「無學科研究」。此方案並不等同於業餘研究，因為它是有意識地主動擯棄特定學科對研究對象和手段的規範，通常為離經叛道的後現代研究者使用，出於對規範的反思或是為了追求更為廣闊的視野。
而準確意義上的科際整合（Interdisciplinarity）通常指在研究環節中，來自不同學科背景的研究者共同協作、調適各自的研究途徑，以取得對問題更準確的切入。同時也指在教育環節中的團隊課程，在這種課程中，學生被要求通過相互學習理解同一個主題（例如土地利用）如何在不同的學科處理下（例如生態學和經濟學）展現不同的面貌。
由於大多數科際整合的參與者是由傳統學科規範所培養，他們必須學會接受不同的視角和手段。比如一個來自強調量化分析學科的參與者可能認為自己及其代表的學科比其他學科更為「科學」；相同的，來自「軟」學科（在與「軟科幻」同樣的意義上）或重視質化分析的研究者可能視量化手段無法掌握個體或個案之個別特殊條件和動態。如果各個成員陷於各自學科的窠臼中，單一學科的是無法畢其功的。
在學科的角度來說，許多科際整合項目可能被視作「軟」的、缺乏科學嚴謹的、或是意識形態驅動的。例如交叉學科的立項通常通過從現有學科中抽取的同行評審委員會的審查，所以並不奇怪地，它們經常無法申請到經費。另外，研究者也意識到，當他們試圖申請評級或是任期評定時，不少評委未必認同學科交叉的意義。因此投身科際整合研究可能會損害他們的職業生涯發展。
如果未被授予足夠的自治權，科際整合項目可能會失敗。譬如在運作的過程中，通常對聘請的科際整合人員通過聯合任命同時編制進入一個科際整合項目（例如女性研究）以及一個傳統學科（例如歷史學）。如果傳統學科進行了任期任命，他就會猶豫是否全身心投入交叉學科的工作。其他的阻礙包括大多數的學術期刊的專業化傾向給人以一種印象（甚或事實），即科際整合的研究成果很難發表。此外，由於傳統上學校的經費是通過各個科系的渠道進行分配，若要計算參與科際整合的學者或教師的薪資則相當困難。而當經費緊缺的時候，優先考慮的自然是中心項目，而處在邊緣的研究和教學的資源就極為稀少了。同樣的原因，引進新的科際整合項目的嘗試通常被認為是瓜分資金的一種競爭，從而引發抵制。
由於上述及其他障礙，科際整合研究非常積極地試圖躋身正式學科行列。如果成功的話，它們就能建立自己的研究資金項目，制定自己的任期和評級體制。這樣他們就能降低進入的門檻。這方面的例子有神經科學、生物化學以及生物醫學工程。這些新的領域被稱為交叉學科。俗話說，「隔行如隔山」；可以想像，期望跨越不止一座「山」的交叉學科人員在實際工作中所要面臨的重重困難和品嘗的種種艱辛。
科際整合教學項目的建立通常為了便於那些從單一學科角度無法充分分析的主題的學習，例如女性研究和中世紀研究等。另一種少見的情況是，交叉學科為了自己的存在而建立，作為對機構化教學對知識的肢解的反抗。可能對科際整合教學的主要批評集中在缺乏綜合性，即，學生被授予多方面學科的視角，卻沒有得到足夠的指導以克服學科間的衝突，以獲得對問題綜合的認識。對科際整合教學的批評者認為這種雄心是不實際的，因為只有極少數學生才具備所要求的知識和智力的成熟性。它的支持者承認這些困難，但堅持認為即使在這個層次，培養科際整合為一種習慣是可能和必要的，它能賦予未來的公民和領袖以足夠的知性，分析、評價及綜合不同來源的信息以得出合理的決定。
全世界的大學都認識到，為了處理人類今天所面對的問題，他們必須增加對科際整合的重視程度。例如源自史丹福大學師生的一項草根運動成功地催生了名為Bio-X的新項目，以探索生物、計算機科學、醫學以及工程學之間的交匯。這個項目位於克拉克中心，開張於2003年。克拉克中心位於學校和醫學中心之間，設計以加速和便利開展學科交叉的研究。每一個實驗室至少配備兩名來自不同參與領域的科學家，而且它們並非封閉的：圍牆可以被移動（或者移除），所有的儀器都裝有小輪。
科際整合是科學中整體論的典型代表，然而並非所有科際整合的研究者承認自己是整體論者，因為他們未必接受整體論的哲學基礎。
以下為部份交叉學科的列表：
機率論（英語：Probability theory）是集中研究機率及隨機現象的數學分支，是研究隨機性或不確定性等現象的數學。機率論主要研究物件為隨機事件、隨機變數以及隨機過程。對於隨機事件是不可能準確預測其結果的[1]，然而對於一系列的獨立隨機事件——例如擲骰子、扔硬幣、抽撲克牌以及輪盤等，會呈現出一定的、可以被用於研究及預測的規律[2]，兩個用來描述這些規律的最具代表性的數學結論分別是大數定律和中央極限定理。
作為統計學的數學基礎，機率論對諸多涉及大量數據定量分析的人類活動極為重要[3]，機率論的方法同樣適用於其他方面，例如是對只知道系統部分狀態的複雜系統的描述——統計力學，而二十世紀物理學的重大發現是以量子力學所描述的原子尺度上物理現象的機率本質[4]。
數學家和精算師認為機率是在0至1閉區間內的數字，指定給一發生與失敗是隨機的「事件」。機率



P
(
A
)


{\displaystyle P(A)}

根據機率公理來指定給事件



A


{\displaystyle A}

。
一事件



A


{\displaystyle A}

在一事件



B


{\displaystyle B}

確定發生後會發生的機率稱為



B


{\displaystyle B}

給之



A


{\displaystyle A}

的條件機率；其數值為






P
(
B
∩
A
)


P
(
B
)





{\displaystyle {P(B\cap A) \over P(B)}}

。若



B


{\displaystyle B}

給之



A


{\displaystyle A}

的條件機率和



A


{\displaystyle A}

的機率相同時，則稱



A


{\displaystyle A}

和



B


{\displaystyle B}

為獨立事件。且



A


{\displaystyle A}

和



B


{\displaystyle B}

的此一關係為對稱的，這可以由一同價敘述：「當



A


{\displaystyle A}

和



B


{\displaystyle B}

為獨立事件時，



P
(
A
∩
B
)
=
P
(
A
)
P
(
B
)


{\displaystyle P(A\cap B)=P(A)P(B)}

。」中看出。
機率論中的兩個重要概念為隨機變數和隨機變數的機率分布兩種。
人們對機率總是有一點觸摸不清的感覺，而事實上也有很多看似奇異的結果：
如果每周都買一組不相同的號，一年有52周，則在實驗越多次（一直買直到中獎算一次）之後，平均中獎所花的時間會越接近





13983816
52


=
268919


{\displaystyle {\frac {13983816}{52}}=268919}

。
事實上，即使每周買相同的號，獲得頭獎的機率也是相同的。
但假設每周實際中獎的組合都不重複，268919年的算術推論是正確的，這說明機率和其他數學理論可能導出不同的結論。
古典機率論說：一樣。
但實際上機械或彩球製造上都有些微小的差異，所以每組機率不一定完全相同，但必須累積多期開獎結果後才看得出來。
不可思議的是，在這23人當中至少有兩個人的生日是在同一天的機率要大於50％。
如果這23人都沒有相同的生日也不違反機率，只是小於50％。
這種判斷也是錯誤的，即出現黑色的機率每次是相等的，因為球本身並沒有「記憶」，
它不會意識到以前都發生了什麼，其機率始終是





18
37




{\displaystyle {\frac {18}{37}}}

。 
但輪盤的前後期開獎數字形成時間序列（可能存在自迴歸模型）。
遊戲規則是，參賽者先選取一扇門，但在他打開之前，主持人在其餘兩扇門中打開了一扇有山羊的門，
並詢問參賽者是否改變主意選擇另一扇門，以使贏得名車的機率變大。
正確的分析結果是，假如不管開始哪一扇門被選，主持人都打開其餘兩扇門中有山羊的那一扇並詢問參賽者是否改變主意，
則改變主意會使贏得汽車的機率增加一倍；（「標準」的三門問題情況。）

假如主持人只在有名車那扇門被選中時勸誘參賽者打開其它門，則改變主意必輸。(資訊不對稱)
作為數學統計基礎的機率論的創始人分別是法國數學家帕斯卡和費馬，其可追溯到公元17世紀。當時的法國宮廷貴族裡盛行著擲骰子遊戲，遊戲規則是玩家連續擲4次骰子，如果其中沒有6點出現，玩家贏，如果出現一次6點，則莊家（相當於現在的賭場）贏。按照這一遊戲規則，從長期來看，莊家扮演贏家的角色，而玩家大部分時間是輸家，因為莊家總是要靠此維生的，而當時人們也接受了這種現象。
後來為了使遊戲更刺激，遊戲規則發生了些許變化，玩家這回用2個骰子連續擲24次，不同時出現2個6點，玩家贏，否則莊家贏。當時人們普遍認為，2次出現6點的機率是一次出現6點的機率的1 / 6，因此6倍於前一種規則的次數，也既是24次贏或輸的機率與以前是相等的。然而事實卻並非如此，從長期來看，這回莊家處於輸家的狀態，於是他們去請教當時的數學家帕斯卡，求助其對這種現象作出解釋。
其他對機率論的發展作出重要貢獻的人還有荷蘭物理、數學家惠更斯，瑞士物理、數學家伯努利，法國數學家棣美弗，法國數學、天文學家拉普拉斯，德國數學家高斯，法國物理、數學家泊松，義大利數學、醫學家卡爾達諾以及蘇聯數學家柯爾莫哥洛夫。
在一次隨機試驗中可能發生的不能再細分的結果被稱為基本事件，或者稱為單位事件，用 



E


{\displaystyle E}

 表示。在隨機試驗中可能發生的所有單位事件的集合稱為事件空間，用 



S


{\displaystyle S}

 來表示。例如在一次擲骰子的隨機試驗中，如果用獲得的點數來表示單位事件，那麼一共可能出現 6 個單位事件，則事件空間可以表示為 



S
=
{
1
,
2
,
3
,
4
,
5
,
6
}


{\displaystyle S=\{1,2,3,4,5,6\}}

。
上面的事件空間是由可數有限單位事件組成，事實上還存在著由可數無限以及不可數單位事件組成的事件空間，比如在一次獲得正面朝上就停止的隨機擲硬幣試驗中，其事件空間由可數無限單位事件組成，表示為：



S
=


{\displaystyle S=}

{ 正，反正，反反正，反反反正，反反反反正，···}，注意到在這個例子中"反反反正"是單位事件。將兩根筷子隨意扔向桌面，其靜止後所形成的交角假設為 



α


{\displaystyle \alpha }

，這個隨機試驗的事件空間的組成可以表示為 



S
=
{
α

|


0

∘


≤
α
<

180

∘


}


{\displaystyle S=\{\alpha |0^{\circ }\leq \alpha <180^{\circ }\}}

。
隨機事件是事件空間 



S


{\displaystyle S}

 的子集，它由事件空間 



S


{\displaystyle S}

 中的單位元素構成，用大寫字母 



A
,
B
,
C
⋯


{\displaystyle A,B,C\cdots }

 表示。例如在擲兩個骰子的隨機試驗中，設隨機事件 



A


{\displaystyle A}

 = 「獲得的點數和大於10」，則 



A


{\displaystyle A}

 可以由下面 3 個單位事件組成：



A
=
{
(
5
,
6
)
,
(
6
,
5
)
,
(
6
,
6
)
}


{\displaystyle A=\{(5,6),(6,5),(6,6)\}}

。
如果在隨機試驗中事件空間中的所有可能的單位事件都發生，這個事件被稱為 必然事件，表示為 



S
⊂
S


{\displaystyle S\subset S}

 ；相應的如果事件空間裡不包含任何一個單位事件，則稱為不可能事件，表示為 



∅
⊂
S


{\displaystyle \varnothing \subset S}

 。
因為事件在一定程度上是以集合的含義定義的，因此可以把集合計算方法直接應用於事件的計算，也就是說，在計算過程中，可以把事件當作集合來對待。
在輪盤遊戲中假設 



A


{\displaystyle A}

 代表事件「球落在紅色區域」，



B


{\displaystyle B}

 代表事件"球落在黑色區域"，因為事件 



A


{\displaystyle A}

 和 



B


{\displaystyle B}

 沒有共同的單位事件，因此可表示為




A
∩
B
=
∅


{\displaystyle A\cap B=\varnothing }


注意到事件 



A


{\displaystyle A}

 和 



B


{\displaystyle B}

 並不是互補的關係，因為在整個事件空間 



S


{\displaystyle S}

 中還有一個單位事件「零」，其即不是紅色也不是黑色，而是綠色，因此 



A
,
B


{\displaystyle A,B}

 的補集應該分別表示如下：







A
¯



=
S
∖
A
=
B
∪

{
0
}



{\displaystyle {\bar {A}}=S\setminus A=B\cup \left\{0\right\}}








B
¯



=
S
∖
B
=
A
∪

{
0
}



{\displaystyle {\bar {B}}=S\setminus B=A\cup \left\{0\right\}}


傳統機率的定義是由法國數學家拉普拉斯 ( Laplace ) 提出的。如果一個隨機試驗所包含的單位事件是有限的，且每個單位事件發生的可能性均相等，則這個隨機試驗叫做拉普拉斯試驗。在拉普拉斯試驗中，事件 



A


{\displaystyle A}

 在事件空間 



S


{\displaystyle S}

 中的機率 



P
(
A
)


{\displaystyle P(A)}

 為：
例如，在一次同時擲一個硬幣和一個骰子的隨機試驗中，假設事件 



A


{\displaystyle A}

 為獲得國徽面且點數大於 4 ，那麼事件 



A


{\displaystyle A}

 的機率應該有如下計算方法：



S
=


{\displaystyle S=}

 { ( 國徽，1 點 )，( 數字，1 點 )，( 國徽，2 點 )，( 數字，2 點 )，( 國徽，3 點 )，( 數字，3 點 )，( 國徽，4 點 )，( 數字，4 點 )，( 國徽，5 點 )，( 數字，5 點 )，( 國徽，6 點 )，( 數字，6 點 ) }，



A


{\displaystyle A}

＝{( 國徽，5 點 )，( 國徽，6 點 )}，按照拉普拉斯定義，



A


{\displaystyle A}

 的機率為，
注意到在拉普拉斯試驗中存在著若干的疑問，在現實中是否存在著其單位事件的機率具有精確相同的機率值的試驗?
因為我們不知道，硬幣以及骰子是否完美，即骰子製造的是否均勻，其重心是否位於正中心，以及輪盤是否傾向於某一個數字。
儘管如此，傳統機率在實踐中被廣泛應用於確定事件的機率值，其理論根據是：
如果沒有足夠的論據來證明一個事件的機率大於另一個事件的機率，那麼可以認為這兩個事件的機率值相等。
如果仔細觀察這個定義會發現拉普拉斯用機率解釋了機率，定義中用了相同的可能性 ( 原文是 également possible )一詞，其實指的就是"相同的機率"。這個定義也並沒有說出，到底什麼是機率，以及如何用數字來確定機率。在現實生活中也有一系列問題，無論如何不能用傳統機率定義來解釋，比如，人壽保險公司無法確定一個 50 歲的人在下一年將死去的機率。
繼傳統機率論之後，英國邏輯學家約翰·維恩和奧地利數學家理察提出建立在頻率理論基礎上的統計機率。他們認為，獲得一個事件的機率值的唯一方法是通過對該事件進行 100 次，1000 次或者甚至 10000 次的前後相互獨立的 



n


{\displaystyle n}

 次隨機試驗，針對每次試驗均記錄下絕對頻率值




h

n




{\displaystyle h_{n}}

(A)和相對頻率值 




f

n




{\displaystyle f_{n}}

(A)，隨著試驗次數 



n


{\displaystyle n}

 的增加，會出現如下事實，即相對頻率值會趨於穩定，它在一個特定的值上下浮動，也即是說存在著一個極限值 



P
(
A
)


{\displaystyle P(A)}

，相對頻率值趨向於這個極限值。這個極限值被稱為統計機率，表示為：
例如，若想知道在一次擲骰子的隨機試驗中獲得 6 點的機率值可以對其進行 3000 次前後獨立的扔擲試驗，在每一次試驗後記錄下出現 6 點的次數，然後通過計算相對頻率值可以得到趨向於某一個數的統計機率值。
上面提到的這個有關相對頻率的經驗規律是大數定律在現實生活中的反映，大數定律是初等機率論的基礎。統計機率在今天的實踐中依然具有重要意義，特別是在初等機率論及數理統計等學科中。
與初等機率論相對的，是「現代機率論」。因「測度論」的研究與發展，現代機率論得以建立公理化系統。一些曾經無法用初等機率論解釋的概念因此得以用公理化的語言進行解釋，可以說現代機率論以測度論為理論基礎終於得以完善，完成了其現代化進程。現代機率論由前蘇聯數學家柯爾莫哥洛夫於1933年建立公理化。
如果一個函數



P
:
S
→

R

,
 
A
↦
P
(
A
)


{\displaystyle P:S\to \mathbb {R} ,\ A\mapsto P(A)}

指定給每一個事件空間 



S


{\displaystyle S}

 中的事件 



A


{\displaystyle A}

 一個實數 



P
(
A
)


{\displaystyle P(A)}

，並且其滿足下面的 3 個公理，那麼函數 



P


{\displaystyle P}

 叫做機率函數，相應的 



P
(
A
)


{\displaystyle P(A)}

 叫做事件 



A


{\displaystyle A}

 的機率。
需要提及的是下面將要介紹的 9 個計算機率的定理與上面已經提及的事件的計算沒有關係，所有關於機率的定理均由機率的 3 個公理得來，同時適用於包括拉普拉斯機率和統計機率在內的所有機率理論。
與 



A


{\displaystyle A}

 互補事件的機率始終是
證明：
事件 



A


{\displaystyle A}

 和 





A
¯




{\displaystyle {\overline {A}}}

 是互補關係，由公理 3 和公理 2 可得
利用互補法則，可以解決下面這個問題，在兩次連續旋轉的輪盤遊戲中，至少有一次是紅色的機率是多少？第一次旋轉紅色不出現的機率是 19/37 ，按照乘法法則，第二次也不出現紅色的機率是 (19/37)2 = 0.2637，因此在這裡互補機率就是指在兩次連續旋轉中至少有一次是紅色的機率，



P
=
1
−


(


19
37


)


2


=
0.7363


{\displaystyle P=1-\left({\frac {19}{37}}\right)^{2}=0.7363}


不可能事件的機率為零：
證明：




∅


{\displaystyle \varnothing }

 和 



S


{\displaystyle S}

 是互補事件，按照公理 2 有
如果若干事件 




A

1


,

A

2


,
⋯

A

n


∈
S


{\displaystyle A_{1},A_{2},\cdots A_{n}\in S}

 每兩兩之間是空集關係，那麼這些所有事件集合的機率等於單個事件的機率的和。
注意針對這一定理有效性的決定因素是 




A

1


⋯

A

n




{\displaystyle A_{1}\cdots A_{n}}

  事件不能同時發生。例如，在一次擲骰子中，得到 5 點或者 6 點的機率是：
如果事件 



A


{\displaystyle A}

，



B


{\displaystyle B}

 是差集關係，則有，
證明：
事件 



A


{\displaystyle A}

 由下面兩個事件組成：
對於事件空間 



S


{\displaystyle S}

 中的任意兩個事件 



A


{\displaystyle A}

 和 



B


{\displaystyle B}

，有如下定理：
證明：
事件 



A
∪
B


{\displaystyle A\cup B}

 由下面三個事件組成：




A
∪
B
=
(
A
∖
B
)
∪
(
A
∩
B
)
∪
(
B
∖
A
)


{\displaystyle A\cup B=(A\setminus B)\cup (A\cap B)\cup (B\setminus A)}

首先根據定理 4 有：








P
(
A
∖
B
)


=


P
(
A
)
−
P
(
A
∩
B
)




P
(
B
∖
A
)


=


P
(
B
)
−
P
(
A
∩
B
)






{\displaystyle {\begin{array}{lcr}P(A\setminus B)&=&P(A)-P(A\cap B)\\P(B\setminus A)&=&P(B)-P(A\cap B)\end{array}}}


再根據定理 3 得：








P
(
A
∪
B
)



=
P
(
A
∖
B
)
+
P
(
A
∩
B
)
+
P
(
B
∖
A
)






=
P
(
A
)
−
P
(
A
∩
B
)
+
P
(
A
∩
B
)
+
P
(
B
)
−
P
(
A
∩
B
)






=
P
(
A
)
+
P
(
B
)
−
P
(
A
∩
B
)






{\displaystyle {\begin{aligned}P(A\cup B)&=P(A\setminus B)+P(A\cap B)+P(B\setminus A)\\&=P(A)-P(A\cap B)+P(A\cap B)+P(B)-P(A\cap B)\\&=P(A)+P(B)-P(A\cap B)\end{aligned}}}


例如，在由一共 32 張牌構成的斯卡特撲克牌中隨機抽出一張，其或者是"方片"或者是"





A




{\displaystyle {\mathcal {A}}}

"的機率是多少？
事件 



A


{\displaystyle A}

，



B


{\displaystyle B}

 是或者的關係，且可同時發生，就是說抽出的這張牌即可以是"方片"，又可以是"





A




{\displaystyle {\mathcal {A}}}

"，



A


{\displaystyle A}

 ∩ 



B


{\displaystyle B}

 ( 既發生 



A


{\displaystyle A}

 又發生 



B


{\displaystyle B}

 ) 的值是 1 / 32，( 從示意圖上也可以看出，即是方片又是





A




{\displaystyle {\mathcal {A}}}

只有一張，即機率是 1 / 32 )，因此有如下結果：



P
(
A
∪
B
)
=


8
32


+


4
32


−


1
32


=


11
32




{\displaystyle P(A\cup B)={\frac {8}{32}}+{\frac {4}{32}}-{\frac {1}{32}}={\frac {11}{32}}}


注意到公理 3 是定理 5 的特殊情況，即 



A


{\displaystyle A}

，



B


{\displaystyle B}

 不同時發生，相應的 P(A∩B)=0
事件 



A


{\displaystyle A}

，



B


{\displaystyle B}

 同時發生的機率是：
公式中的 



P
(
A

|

B
)


{\displaystyle P(A|B)}

 是指在 



B


{\displaystyle B}

 條件下 



A


{\displaystyle A}

 發生的機率，又稱作條件機率。回到上面的斯卡特遊戲中，在 32 張牌中隨機抽出一張，即是方片又是





A




{\displaystyle {\mathcal {A}}}

的機率是多少呢？現用 



P
(
A
)


{\displaystyle P(A)}

 代表抽出方片的機率，用 



P
(
B
)


{\displaystyle P(B)}

 代表抽出





A




{\displaystyle {\mathcal {A}}}

的機率，很明顯，



A


{\displaystyle A}

，



B


{\displaystyle B}

 之間有一定聯繫，即 



A


{\displaystyle A}

 里包含有 



B


{\displaystyle B}

，



B


{\displaystyle B}

 里又包含有 



A


{\displaystyle A}

，在 



A


{\displaystyle A}

 的條件下發生 



B


{\displaystyle B}

 的機率是 P(B | A)=1/8，則有：




P
(
A
∩
B
)
=
P
(
A
)
⋅
P
(
B
|
A
)
=


8
32


⋅


1
8


=


1
32




{\displaystyle P(A\cap B)=P(A)\cdot P(B\vert A)={\frac {8}{32}}\cdot {\frac {1}{8}}={\frac {1}{32}}}


或者，



P
(
A
∩
B
)
=
P
(
B
)
⋅
P
(
A
|
B
)
=


4
32


⋅


1
4


=


1
32




{\displaystyle P(A\cap B)=P(B)\cdot P(A\vert B)={\frac {4}{32}}\cdot {\frac {1}{4}}={\frac {1}{32}}}

從上面的圖中也可以看出，符合條件的只有一張牌，即方片





A




{\displaystyle {\mathcal {A}}}

。
另一個例子，在 32 張斯卡特牌里連續抽兩張 ( 第一次抽出的牌不放回去 )，連續得到兩個





A




{\displaystyle {\mathcal {A}}}

的機率是多少呢？設 



A


{\displaystyle A}

，



B


{\displaystyle B}

 分別為連續發生的這兩次事件，我們看到，



A


{\displaystyle A}

，



B


{\displaystyle B}

 之間有一定聯繫，即 



B


{\displaystyle B}

 的機率由於 



A


{\displaystyle A}

 發生了變化，屬於條件機率，按照公式有：



P
(
A
∩
B
)
=
P
(
A
)
⋅
P
(
B
|
A
)
=


4
32


⋅


3
31


=


3
248




{\displaystyle P(A\cap B)=P(A)\cdot P(B\vert A)={\frac {4}{32}}\cdot {\frac {3}{31}}={\frac {3}{248}}}


兩個不相關聯的事件 



A


{\displaystyle A}

，



B


{\displaystyle B}

 同時發生的機率是：
注意到這個定理實際上是定理 6 (乘法法則) 的特殊情況，如果事件 



A


{\displaystyle A}

，



B


{\displaystyle B}

 沒有聯繫，則有 P(A|B)=P(A)，以及 P(B|A)=P(B)。現在觀察一下輪盤遊戲中兩次連續的旋轉過程，



P
(
A
)


{\displaystyle P(A)}

 代表第一次出現紅色的機率，



P
(
B
)


{\displaystyle P(B)}

 代表第二次出現紅色的機率，可以看出，



A


{\displaystyle A}

 與 



B


{\displaystyle B}

 沒有關聯，利用上面提到的公式，連續兩次出現紅色的機率為：




P
(
A
∩
B
)
=


18
37


⋅


18
37


=
0.2367


{\displaystyle P(A\cap B)={\frac {18}{37}}\cdot {\frac {18}{37}}=0.2367}


忽視這一定理是造成許多玩家失敗的根源，普遍認為，經過連續出現若干次紅色後，黑色出現的機率會越來越大，事實上兩種顏色每次出現的機率是相等的，之前出現的紅色與之後出現的黑色之間沒有任何聯繫，因為球本身並沒有「記憶」，它並不「知道」以前都發生了什麼。同理，連續 10 次出現紅色的機率為 P=(18/37)10 =0.0007




n


{\displaystyle n}

 個事件 




H

1


,

H

2


,
.
.
.

H

n




{\displaystyle H_{1},H_{2},...H_{n}}

 互相間獨立，且共同組成整個事件空間 



S


{\displaystyle S}

，即





H

i


∩

H

j


=
∅


{\displaystyle H_{i}\cap H_{j}=\varnothing }

，



(
i
≠
j
)


{\displaystyle (i\neq j)}

 以及





H

1


∪

H

2


∪
.
.
.
∪

H

n


=
S


{\displaystyle H_{1}\cup H_{2}\cup ...\cup H_{n}=S}


這時 



A


{\displaystyle A}

 的機率可以表示為，
證明：




A
=
(
A
∩

H

1


)
∪
(
A
∩

H

2


)
∪
…
∪
(
A
∩

H

n


)


{\displaystyle A=(A\cap H_{1})\cup (A\cap H_{2})\cup \ldots \cup (A\cap H_{n})}

按照公理 3 ，有




P
(
A
)
=
P
(
A
∩

H

1


)
+
P
(
A
∩

H

2


)
+
…
+
P
(
A
∩

H

n


)


{\displaystyle P(A)=P(A\cap H_{1})+P(A\cap H_{2})+\ldots +P(A\cap H_{n})}


根據乘法法則，



P
(
A
∩

H

j


)
=
P
(
A

|


H

j


)
⋅
P
(

H

j


)


{\displaystyle P(A\cap H_{j})=P(A|H_{j})\cdot P(H_{j})}

因此有，




P
(
A
)
=
P
(
A

|


H

1


)
⋅
P
(

H

1


)
+
…
+
P
(
A

|


H

n


)
⋅
P
(

H

n


)


{\displaystyle P(A)=P(A|H_{1})\cdot P(H_{1})+\ldots +P(A|H_{n})\cdot P(H_{n})}






P
(
A
)
=

∑

j
=
1


n


P
(
A

|


H

j


)
⋅
P
(

H

j


)


{\displaystyle P(A)=\sum _{j=1}^{n}P(A|H_{j})\cdot P(H_{j})}


例如，一個隨機試驗工具由一個骰子和一個柜子中的三個抽屜組成，抽屜 1 里有 14 個白球和 6 個黑球，抽屜 2 里有 2 個白球和 8 個黑球，抽屜 3 里有 3 個白球和 7 個黑球，試驗規則是首先擲骰子，如果獲得小於 4 點，則抽屜 1 被選擇，如果獲得 4 點或者 5 點，則抽屜 2 被選擇，其他情況選擇抽屜 3 。然後在選擇的抽屜里隨機抽出一個球，最後抽出的這個球是白球的機率是：
P(白)=P(白|抽1)·P(抽1)+P(白|抽2)·P(抽2)＋P(白|抽3)·P(抽3)
從例子中可看出，完全機率特別適合於分析具有多層結構的隨機試驗的情況。
貝葉斯定理由英國數學家托馬斯·貝葉斯 ( Thomas Bayes 1702-1761 ) 發展，用來描述兩個條件機率之間的關係，比如 P(A|B) 和 P(B|A)。按照定理 6 的乘法法則，P(A∩B)=P(A)·P(B|A)=P(B)·P(A|B)，可以立刻導出貝葉斯定理：

例如：一座別墅在過去的 20 年裡一共發生過 2 次被盜，別墅的主人有一條狗，狗平均每周晚上叫 3 次，在盜賊入侵時狗叫的機率被估計為 0.9，問題是：在狗叫的時候發生入侵的機率是多少？我們假設 



A


{\displaystyle A}

 事件為狗在晚上叫，



B


{\displaystyle B}

 為盜賊入侵，則 



P
(
A
)
=
3

/

7


{\displaystyle P(A)=3/7}

，



P
(
B
)


{\displaystyle P(B)}

=2/(20·365.25)=2/7305，P(A | B) = 0.9，按照公式很容易得出結果：



P
(
B
|
A
)
=
0.9
⋅


2
7305


⋅


7
3


=
0.0005749486653...


{\displaystyle P(B\vert A)=0.9\cdot {\frac {2}{7305}}\cdot {\frac {7}{3}}=0.0005749486653...}


另一個例子，現分別有 



A


{\displaystyle A}

，



B


{\displaystyle B}

 兩個容器，在容器 



A


{\displaystyle A}

 里分別有 7 個紅球和 3 個白球，在容器 



B


{\displaystyle B}

 里有 1 個紅球和 9 個白球，現已知從這兩個容器里任意抽出了一個球，且是紅球，問這個紅球是來自容器 



A


{\displaystyle A}

 的機率是多少?
假設已經抽出紅球為事件 



B


{\displaystyle B}

，從容器 



A


{\displaystyle A}

 里抽出球為事件 



A


{\displaystyle A}

，則有：



P
(
B
)


{\displaystyle P(B)}

 = 8 / 20，



P
(
A
)


{\displaystyle P(A)}

 = 1 / 2，



P
(
B

|

A
)


{\displaystyle P(B|A)}

 = 7 / 10，按照公式，則有：



P
(
A
|
B
)
=


7
10


⋅


1
2


⋅


20
8


=


7
8




{\displaystyle P(A\vert B)={\frac {7}{10}}\cdot {\frac {1}{2}}\cdot {\frac {20}{8}}={\frac {7}{8}}}


雖然機率論最早產生於17世紀，然而其公理體系只在20世紀的20至30年代才建立起來並得到迅速發展，在過去的半個世紀裡機率論在越來越多的新興領域顯示了它的應用性和實用性，例如：物理、化學、生物、醫學、心理學、社會學、政治學、教育學，經濟學以及幾乎所有的工程學等領域。特別值得一提的是，機率論是今天數理統計的基礎，其結果被用做問卷調查的分析資料或者對經濟前景進行預測。
統計學是在資料分析的基礎上，研究測定、收集、整理、歸納和分析反映資料資料，以便給出正確訊息的科學。這一門學科自17世紀中葉產生並逐步發展起來，它廣泛地應用在各門學科，從自然科學、社會科學到人文學科，甚至被用於工商業及政府的情報決策。隨著巨量資料時代來臨，統計的面貌也逐漸改變，與資訊、計算等領域密切結合，是資料科學中的重要主軸之一。
譬如自一組資料中，可以摘要並且描述這份資料的集中和離散情形，這個用法稱作為描述統計學。另外，觀察者以資料的形態，建立出一個用以解釋其隨機性和不確定性的數學模型，以之來推論研究中的步驟及母體，這種用法被稱做推論統計學。這兩種用法都可以被稱作為應用統計學。數理統計學則是討論背後的理論基礎的學科。
很多人認為統計學是一種科學的數學分支，是關於收集、分析、解釋、陳述資料的科學。[1]另一些人認為它是數學的一個分支，因為統計學是關於收集解釋資料的。[2]由於它基於觀測、重視應用，統計學常被看作是一門獨特的數學科學，而不是一個數學分支。[3][4]很多統計學都不是數學的：如確保所收集來的資料能得出有效的結論；將資料編碼、存檔以使得資訊得以儲存，可以在國際上進行比對；匯報結果、總結資料，以便統計員可以明白它們的意思；採取必要措施，保護資料來源物件的隱私。
統計學家通過專門的試驗設計和調查樣本來提升資料品質。統計學自身也為資料的機率模型提供了預測工具。統計學在其他學術科目上得到了廣泛的應用，如自然科學、社會科學、政府、商業等。統計顧問可以幫助沒有入戶調查經驗組織與公司進行問卷研究。
總結敘述收集來的資料被稱之為描述統計學。這在進行實驗研究資訊交流中十分有用。另外，從資料的分布上也可以得出觀測上的隨機性和不確定性。
將資料中的資料模型化，計算它的機率並且做出對於母群體的推論被稱之為推論統計學。推論是科學進步的重要因素，因為它可能從隨機變數中得出資料的結論。推論統計學將命題進行更深入的研究，將結果進行檢測。這些都是科學方式的一部分。描述統計學和對新資料的分析更傾向於提供更多的資訊，逼近命題所述的真理。
「應用統計學」包括描述統計學和推論統計學中的應用成分。[5]理論統計學則注重統計推論背後的邏輯證明，以及數理統計學。數理統計學不但包括推導估測推論法的機率分布，還包括了計算統計和試驗設計。
統計學與機率論聯絡緊密，並常以後者為理論基礎。簡單地講，兩者不同點在於機率論從母群體中推導出樣本的機率。統計推論則正好相反——從小的樣本中得出大的母群體的資訊。
統計手法最早可以追溯至公元前5世紀。最早的統計著作來自公元9世紀的《密碼破譯》（Manuscript on Deciphering Cryptographic Messages）一書，由阿拉伯人肯迪編著。在書中，肯迪詳細記錄了如何使用統計資料和頻率分析進行密碼破譯。根據沙烏地阿拉伯工程師易卜拉欣·阿凱笛（Ibrahim Al-Kadi）的說法，統計學和密碼學分析便如此一同誕生了[6][7]
佛羅倫斯銀行家、執政官喬瓦尼·維倫（英語：Giovanni Villani）編訂了佛羅倫斯14世紀歷史書籍Nuova Cronica ,包括了如人口、法令、商貿、教育、宗教場所在內的統計資料，被譽之為歷史上統計學入門的第一本書。[8]一些學者將1663年約翰·格蘭特根據死亡率統計表編訂出版的《自然與政治觀察》（Natural and Political Observations）一書定格為統計學的誕生。[9]
統計學的英語詞statistics是源於現代拉丁語statisticum collegium（國會）以及義大利語statista（國民或政治家）。德語Statistik，最早是由Gottfried Achenwall（1749）所使用，代表對國家的資料進行分析的學問，也就是「研究國家的科學」。在十九世紀統計學在廣泛的資料以及資料中探究其意義，並且由John Sinclair引進到英語世界。
統計學的初衷是作為政府（通常是中央政府）以及管理階層的工具。它大量透過國家以及國際統計服務蒐集國家以及本土的資料。另外依照各方面，普查則提供關母體的資訊。統計背後牽涉到更多數學導向的領域，如機率，或是從經驗科學（特別在天文學）中獲得的經驗證據設定估計參數。在今日的世界裡統計已經被使用在不僅僅是國家或政府的事務，更延伸到商業，自然以及社會科學，醫療等甚至更多方面。因為統計學擁有深厚的歷史以及廣泛的應用性，統計學通常不只被認為是數學所處理的物件，而是與數學本身的哲學定義與意義有密切的關聯。許多知名的大學擁有獨立的數理統計學系。統計學也在如心理學，教育學以及公共衛生學系中被視為是一門主科。
統計學的數學基礎建立在17世紀布萊茲·帕斯卡和皮埃爾·德·費馬發展的機率論上。機率論從研究機率得來。最小平方法由卡爾·弗里德里希·高斯於1794年第一次得出。現代電腦可以進行更大尺度的統計運算，生成了許多無法用人工計算的新公式。
為了將統計學應用到科學、工業以及社會問題上，我們由研究母群體開始。這可能是一個國家的人民，石頭中的水晶，或者是某家特定工廠所生產的商品。一個母群體甚至可能由許多次同樣的觀察程式所組成;由這種資料蒐集所組成的母群體我們稱它叫時間序列。
為了實際的理由，我們選擇研究母群體的子集代替研究母群體的每一筆資料，這個子集稱做樣本。以某種經驗設計實驗所蒐集的樣本叫做資料。資料是統計分析的物件，並且被用做兩種相關的用途：描述和推論。
相關的觀念特別值得被拿出來討論。對於資料集合的統計分析可能顯示兩個變數（母群體中的兩種性質）傾向於一起變動，好像它們是相連的一樣。舉例來說，對於人收入和死亡年齡的研究期刊可能會發現窮人比起富人平均來說傾向擁有較短的生命。這兩個變數被稱做相關的。但是實際上，我們不能直接推論這兩個變數中有因果關係;參見相關性推論因果關係（邏輯謬誤）。
如果樣本足以代表母群體的，那麼由樣本所做的推論和結論可以被引申到整個母群體之上。最大的問題在於決定樣本是否足以代表整個母群體。統計學提供了許多方法來估計和修正樣本和蒐集資料過程中的隨機性（誤差），如同上面所提到的透過經驗所設計的實驗。參見實驗設計。
要了解隨機性或是機率必須具備基本的數學觀念。數理統計（通常又叫做統計理論）是應用數學的分支，它使用機率論來分析並且驗證統計的理論基礎。
任何統計方法是有效的只有當這個系統或是所討論的母群體滿足方法論的基本假設。誤用統計學可能會導致描述面或是推論面嚴重的錯誤，這個錯誤可能會影響社會政策，醫療實踐以及橋樑或是核能發電計畫結構的可靠性。
即使統計學被正確的應用，結果對於不是專家的人來說可能會難以陳述。一些統計科學的結果對於大眾而言相當費解。舉例來說，統計資料中顯著的改變可能是由樣本的隨機變數所導致，但是這個顯著性可能與大眾而言難以理解。另外，某些統計學分析（尤其當涉及機率論時）得出的結論可能非常違悖一般人的直覺，如蒙提霍爾問題。人們（甚至包括一些科學家）往往需要統計的技巧（或懷疑）才能理解其正確性。
統計研究中的共同目標是分析因果關係，具體來講就是從預估資料變化中得出結論，或是研究自變數與應變數之間的關係。因果統計研究主要有兩種：實驗研究和觀察研究。在兩種研究中，自變數改變對應變數所造成的影響可以被觀測到。兩種實驗間的不同在於實驗時如何進行的。兩種實驗都很厲害。實驗研究包括將系統尺度進行研究、操縱系統、使用更多的尺度進行同樣的實驗來確定操作是否改變了尺度的值。與之相對的是觀察研究，觀察研究不包括實驗性操作。在此，資料被收集，預估資料與回覆資料間的相關係數被研究。
統計實驗的基本步驟如下：
對人類行為的實驗研究應該多加謹慎。著名的霍桑效應在西方電器公司（英語：Western Electric）位於伊利諾州的霍桑工廠（Hawthorne Works）進行心理學實驗，研究工作環境改變對生產率的影響。研究人員嘗試增強照明，觀察它是否有助於提高流水線工人的生產率。研究人員首先檢測了工廠的生產率，爾後改變車間的照明強度，觀察結果。結果是生產率在實驗環境下的確提升了。然而，該實驗因其流程誤差在今天飽受批評，特別是實驗缺乏參照組和雙盲。霍桑效應指僅從觀測來得出結論。該實驗中生產率的提升不是因為照明強度的改變，而是因為工人們發覺他們被圍觀了。
觀察研究的具體例子是研究吸菸與肺癌之間的相關係數。這種研究常用調查來收集所需資訊的觀測結果，並對其進行統計分析。在本案例中，研究人員會收集吸菸和不吸菸者的觀察資料，進行病例對照研究，然後觀察每組中肺癌患者的數量。
根據Stevens（1951）對數字的尺度分類，統計學一共有四種測量的尺度或是四種測量的方式。這四種測量（名目、順序、等距、等比）在統計過程中各具有不等的實用性。等比尺度（Ratio measurements）擁有零值及資料間的距離是相等被定義的；等距尺度（Interval measurements）資料間的距離是相等被定義的，但是它的零值並非絕對的無，而是自行定義的（如智力或溫度的測量）；順序尺度（Ordinal measurements）的意義並非表現在其值而是在其順序之上；名目尺度（Nominal measurements）的測量值則不具量的意義。
對統計資訊的解釋時常涉及到構建零假設，在該假設中，所有因素對變數都不起任何作用。
對新手來說最佳的比喻就是法庭窘境了。零假設H0認為被告是清白的，而備擇假設H1則認為被告有罪。起訴是因為懷疑被告有罪。H0（現狀）與H1對立並且被認可，除非H1被「超過合理質疑」的證據證偽。然而，「無法排除H0」並不能代表被告清白，只是說證據無法將其定罪。所以，陪審團沒有必要在H0「無法推翻」的情況下將其「接受」。當零假設無法被「證明」時，可以通過強度檢測判斷假設是否近似成立，即進行第二型錯誤檢測。
在零假設中存在兩種基本誤差：
當對樣本的個體觀察偏離了中心資料，如樣本或母群體平均數，誤差就出現了。許多統計方法嘗試將中位數乘法的誤差最小化，這種方法被稱之為「最小平方法」。
生成統計資料的過程也會產生誤差。很多類似誤差被是隨機（噪音）性的，或是系統（偏倚）性的。但很多其他類型的重大誤差（如疏忽：分析員把單位填錯了）也是不容忽視的。
許多時候研究只觀察母群體的樣本部分，所以結果並不能完全代表整個母群體。任何來自樣本的估算只能得到母群體的近似值。信賴區間是統計學家用來表述樣本結果離整個母群體真實數值之間的差距。這常被表述為95%信賴區間。形式上，數值為95%信賴區間意味著如果在同樣情況下重複樣本分析（這回生成不同的資料集），95%的區間會得出符合（母群體）情況的實際結果。這並不意味著真實數值的機率也在95%信賴區間之內。從頻率論的角度來說，這樣的說法毫無意義，因為真實數值不是一個隨機變數。真實數值要麼在，要麼不再給定的區間裡。然而，任何資料在被抽取樣本，設計信賴區間之前，將要被計算的區間確實有95%的機率能代表真實數值：在這一點上，區間的極限仍然是有待被觀測的隨機變數。利用貝葉斯統計信賴區間可以得出區間包涵真實數值的機率：這種方法對「機率」有另一種解釋，即貝葉斯機率。
對於給出的問題，統計學很少回答簡單的是或否。它的解釋常常是以統計的顯著性差異出現，匯報可以將零假設精確證偽的機率值（這也被稱作是p值、假定值）。
顯著性差異並不一定代表所有的結果在現實世界裡都很顯著。例如對藥品的研究得出其具有統計的顯著性差異，但是實際上藥品可能毫無益處。這樣的藥品不會很有效地幫助病人康復。
由於假設檢驗中可能更加偏向於某一假設（如零假設），在大尺度研究中可能會對微小差異過度誇張，因此這中方法受到批評。顯著性差異所得出的重大差額並不一定在現實中有意義，但是我們仍舊可以據此設計出相應的實驗。
在報告假設是否被證偽時，一些方法不僅僅報告顯著性差異和p值。p值並不代表效應的尺度。更好更常用的方法使報告信賴區間。雖然該值是從相同的假設測試或p值計算過程中得出的，但是它對效應的尺度及其不確定性都給出了描述。
以下列出一些有名的統計檢定方法以及可供驗證實驗資料的程式
有些科學廣泛的應用統計的方法使得他們擁有各自的統計術語，這些學科包括：
統計對於商業以及工業是一個基本的關鍵。他被用來了解與測量系統變異性，程式控制，對資料作出結論，並且完成資料取向的決策。在這些領域統計扮演了一個重要的角色。
電腦在20世紀後半葉的大量應用對統計科學產生了極大的影響。早期統計模型常常為迴歸線性模型，但強勁的電腦及其演算法導致非線性模型（如神經網路）和新式演算法（如廣義線性模式、等級線性模型、支援向量機）的大量應用。
電腦效能的增強使得需要大量計算的再取樣演算法成為時尚，如置換檢驗、自助法。Gibbs取樣法也使得貝葉斯模型更加可行。電腦革命使得統計在未來更加注重「實驗」和「經驗」。大量普通或專業的統計軟體現已面市。
統計資料時常被濫用，對結果的解釋時常有利於演講者。[10]對統計的懷疑與誤導可被稱為：「世上有三種謊言：謊言，該死的謊言，統計數字」。許多對統計的濫用可能出於無意，也可能出於故意。《如何用統計來說謊》一書（How to Lie With Statistics）[10]揭露了許多類似詭計，並在統計的應用與濫用中，回顧了許多案例中的統計方法（e.g. Warne, Lazo, Ramos, and Ritter（2012）。[11]
預防統計濫用包括使用合適的圖表、規避偏差。[12]當結論被輕率概化，超過了它所能代表的範圍時，濫用就出現了。這常常是因無意或故意忽視樣本偏差所導致的。[13] 條形統計圖可能是最容易使用、最容易理解的圖表了，它可以用手或電腦繪製而成。[13]不巧的是，許多人忽視其中的偏差、誤差，因為他們不留意。因此，雖然圖表品質低劣，但人們常常願意去相信。[13]只有當樣本可以代表母群體時，統計結果才是可信、精確的。[14]哈弗（Huff）稱：「樣本的可靠性可以被偏差破壞...給你自己點懷疑的空間吧。」[15]
數學中的逼近理論是如何將一函數用較簡單的函數來找到最佳逼近，且所產生的誤差可以有量化的表徵（英語：Characterization (mathematics)），以上提及的「最佳」及「較簡單」的實際意義都會隨著應用而不同。
數學中有一個相關性很高的主題，是用廣義傅立葉級數（英語：generalized Fourier series）進行函數逼近，也就是用以正交多項式為基礎的級數來進行逼近。
計算機科學中有一個問題和逼近理論有關，就是在數學函式庫中如何用計算機或計算器可以執行的功能（例如乘法和加法）儘可能的逼近某一數學函數[1]，一般會用多項式或有理函數（二多項式的商）來進行。
逼近理論的目標是儘可能地逼近實際的函數，一般精度會接近電腦浮點運算的精度，一般會用高次的多項式，以及（或者）縮小多項式逼近函數的區間。縮小區間可以針對要逼近的函數，利用許多不同的係數及增益來達到。現在的數學函式庫會將區間劃分為許多的小區間，每個區間搭配一個次數不高的多項式。
只要選定了多項式的次數及逼近的範圍，就可以用以使最壞情形誤差最小化的原則，來選擇逼近多項式，其目的為最小化



∣
P
(
x
)
−
f
(
x
)
∣


{\displaystyle \mid P(x)-f(x)\mid }

的絕對值，其中P(x)為逼近多項式，而f(x)為實際的函數。對於一個良態的函數，存在一個N次的多項式，使誤差曲線的大小在



+
ε


{\displaystyle +\varepsilon }

和



−
ε


{\displaystyle -\varepsilon }

之間震盪至多N+2次，其最壞情形的誤差為



ε


{\displaystyle \varepsilon }

。一個N次的多項式可以內插曲線中的N+1個點。當然也有可能製造一些極端的函數，使得滿足上述條件的多項式不存在，但在實務上很少需要為這様的函數進行逼近。
例如右圖中的紅線就是用N = 4情形下用多項式逼近log(x)及exp(x)的誤差。誤差在



+
ε


{\displaystyle +\varepsilon }

和



−
ε


{\displaystyle -\varepsilon }

之間震盪。每一個例子中的極端有N+2個，也就是6個。極值出現在區間的端點，也就是圖的最左邊及最右邊。
切比雪夫近似是利用將函數展開為由切比雪夫多項式組成的各項，依需要的逼近程度決定展開的項次，可以得到很接近多項式的結果。此作法類似進行函數的傅立葉分析，只是用切比雪夫多項式代替分析中用到的三角函數。
若計算一函數切比雪夫展開的係數：
只展開到




T

N




{\displaystyle T_{N}}

項為止，可以得到一個逼近f(x)的N次多項式。
對於一個有快速收斂冪級數的函數而言，若展開到一定項次後截止不再展開，截止產生的誤差接近截止後的第一項，因此誤差可以由截止後的第一項代表。若是用切比雪夫多項式展開，也會有一様的結果。若切比雪夫展開只展開到




T

N




{\displaystyle T_{N}}

，後面截止，其誤差會接近




T

N
+
1




{\displaystyle T_{N+1}}

的整數倍。切比雪夫多項式的特點是在[−1, 1]區間以內．其數值會在+1和−1之間震盪。




T

N
+
1




{\displaystyle T_{N+1}}

有N+2個極點。因此f(x)和切比雪夫展開的誤差接近一個有N+2個極點的函數，因此為近似最佳的N次多項式[2]。
在上面中，可以看到藍色線（切比雪夫近似的誤差）有時比紅色線（最佳多項式的誤差）接近x軸，但有時藍色線反而離x軸較遠，因此切比雪夫近似和最佳多項式畢竟還是有差異。不過exp函數是快速收斂的函數，切比雪夫近似的誤差會比log函數要好。
切比雪夫近似是數值積分方法Clenshaw–Curtis正交法（英語：Clenshaw–Curtis quadrature）的基礎。
雷米茲演算法是在1934年由蘇俄數學家雷米茲（英語：Evgeny Yakovlevich Remez）提出的演算法[3]。可用來產生在一定區間內逼近函數f(x)的最佳多項式P(x)。雷米茲演算法是一種疊代式的演算法，最後會收斂到使誤差函數N+2個極值的多項式。
雷米茲演算法是用以下的事實為基礎：可以在有N+2個測試點的情形下，創建一個N次多項式，其誤差函數在0附近震盪。
假設N+2個測試點




x

1




{\displaystyle x_{1}}

, 




x

2




{\displaystyle x_{2}}

, ... 




x

N
+
2




{\displaystyle x_{N+2}}

（其中




x

1




{\displaystyle x_{1}}

和




x

N
+
2




{\displaystyle x_{N+2}}

假設是區間的二個端點），需求解以下的多項式：
等式右側的正負號交替出現。因此可以得到下式：
既然




x

1




{\displaystyle x_{1}}

, ..., 




x

N
+
2




{\displaystyle x_{N+2}}

給定，其各次方的冪次也是已知，而



f
(

x

1


)


{\displaystyle f(x_{1})}

, ..., 



f
(

x

N
+
2


)


{\displaystyle f(x_{N+2})}

也是已知。上式就變成由N+2的線性方程組成的聯立方程．有N+2個變數，分別是




P

0




{\displaystyle P_{0}}

, 




P

1




{\displaystyle P_{1}}

, ..., 




P

N




{\displaystyle P_{N}}

及



ε


{\displaystyle \varepsilon }

。可以解出上式的多項式P及誤差



ε


{\displaystyle \varepsilon }

。
下圖產生一個在[−1, 1]區間內逼近




e

x




{\displaystyle e^{x}}

的四階多項式，六個測試點為
−1, −0.7, −0.1, +0.4, +0.9和1。在圖中將二端點以外的測試點標示綠色，其誤差



ε


{\displaystyle \varepsilon }

為 is 4.43 x 10−4。
注意到上圖在六個測試點上的誤差的確是



±
ε


{\displaystyle \pm \varepsilon }

，但極值不是在測試點上。若極值在測試點上（P(x)-f(x)在測試點上有最大值或最小值），在此這個區間的誤差都不會超過



±
ε


{\displaystyle \pm \varepsilon }

，此多項式即為最佳多項式。
雷米茲演算法的第二步就是將測試點移到誤差函數有最大值或最小值，例如上圖中−0.1的測試點需移到−0.28。移動的方式可以進行一輪牛頓法，來取新的測試點位置，由於知道P(x)−f(x)的一階及二階導數，因此可以大略計算測試點要移到哪裡才能使誤差函數的微分為零。計算多項式P(x)的一階及二階導數並不困難，但雷米茲演算法需要可以計算f(x)的一階及二階導數，而且需要很高的精度，其精度需求要比雷米茲演算法輸出期望的精度要高。
在移動測試點後，會產生新的線性聯立方程，求解後得到新的多項式，再利用牛頓法去找下一組測試點……，一直到結果收斂到需要的精度為止。雷米茲演算法收斂速度很快，對於良態的函數，雷米茲演算法是二次收斂，若測試點是在正確位置的




10

−
15




{\displaystyle 10^{-15}}

誤差範圍內，下次測試點是在正確位置的




10

−
30




{\displaystyle 10^{-30}}

誤差範圍內。
使用雷米茲演算法時，一般會選切比雪夫多項式




T

N
+
1




{\displaystyle T_{N+1}}

的零點為初始測試點，因為最後的誤差函數會類似切比雪夫多項式。
計算複雜性理論（Computational complexity theory）是理論電腦科學和數學的一個分支，它致力於將可計算問題根據它們本身的複雜性分類，以及將這些類別聯絡起來。一個可計算問題被認為是一個原則上可以用電腦解決的問題，亦即這個問題可以用一系列機械的數學步驟解決，例如演算法。
如果一個問題的求解需要相當多的資源（無論用什麼演算法），則被認為是難解的。計算複雜性理論通過引入數學計算模型來研究這些問題以及定量計算解決問題所需的資源（時間和空間），從而將資源的確定方法正式化了。其他複雜性測度同樣被運用，比如通信量（應用於通信複雜性），電路中門的數量（應用於電路複雜性）以及中央處理器的數量（應用於平行計算）。計算複雜性理論的一個作用就是確定一個能或不能被電腦求解的問題的所具有的實際限制。
在理論電腦科學領域，與此相關的概念有演算法分析和可計算性理論。兩者之間一個關鍵的區別是前者致力於分析用一個確定的演算法來求解一個問題所需的資源量，而後者則是在更廣泛意義上研究用所有可能的演算法來解決相同問題。更精確地說，它嘗試將問題分成能或不能在現有的適當受限的資源條件下解決這兩類。相應地，在現有資源條件下的限制正是區分計算複雜性理論和可計算性理論的一個重要指標：後者關心的是何種問題原則上可以用演算法解決。
計算複雜性理論所研究的資源中最常見的是時間（要通過多少步演算才能解決問題）和空間（在解決問題時需要多少記憶體）。其他資源亦可考慮，例如在平行計算中，需要多少並列處理器才能解決問題。
時間複雜度是指在電腦科學與工程領域完成一個演算法所需要的時間，是衡量一個演算法優劣的重要參數。時間複雜度越小，說明該演算法效率越高，則該演算法越有價值。
空間複雜度是指電腦科學領域完成一個演算法所需要占用的儲存空間，一般是輸入參數的函式。它是演算法優劣的重要度量指標，一般來說，空間複雜度越小，演算法越好。我們假設有一個圖靈機來解決某一類語言的某一問題，設有



X


{\displaystyle X}

個字（word）屬於這個問題，把



X


{\displaystyle X}

放入這個圖靈機的輸入端，這個圖靈機為解決此問題所需要的工作帶格子數總和稱為空間。
複雜度理論和可計算性理論不同，可計算性理論的重心在於問題能否解決，不管需要多少資源。而複雜性理論作為計算理論的分支，某種程度上被認為和演算法理論是一種「矛」與「盾」的關係，即演算法理論專注於設計有效的演算法，而複雜性理論專注於理解為什麼對於某類問題，不存在有效的演算法。
在20世紀50年代，Trahtenbrot和Rabin的論文被認為是該領域最早的文獻。而一般說來，被公認為奠定了計算複雜性領域基礎的是Hartmanis和Stearns的1960年代的論文On the computational complexity of algorithms。在這篇論文中，作者引入了時間複雜性類別




TIME

(
f
(
n
)
)


{\displaystyle {\text{TIME}}(f(n))}

的概念，並利用對角線法證明了時間層級定理（Time Hierarchy Theorem）。
在此之後，許多研究者對複雜性理論作出了貢獻。期間重要的發現包括：對隨機演算法的去隨機化（derandomization）的研究，對近似演算法的不可近似性（hardness of approximation）的研究，以及互動式證明系統理論和零知識證明（Zero-knowledge proof）等。特別的複雜性理論對近代密碼學的影響非常顯著，而最近，複雜性理論的研究者又進入了博弈論領域，並創立了「演算法博弈論」（algorithmic game theory）這一分支。
計算複雜性理論的研究物件是演算法在執行時所需的計算資源，而為了討論這一點，我們必須假設演算法是在某個計算模型上執行的。常討論的計算模型包括圖靈機（Turing machine）和電路（circuit），它們分別是一致性（uniform）和非一致性（non-uniform）計算模型的代表。而計算資源與計算模型是相關的，如對圖靈機我們一般討論的是時間、空間和隨機源，而對電路我們一般討論電路的大小。
由邱奇-圖靈論題（Church-Turing thesis），所有的一致的計算模型與圖靈機在多項式時間意義下是等價的。而由於我們一般將多項式時間作為有效演算法的標誌，該論題使得我們可以僅僅關注圖靈機而忽略其它的計算模型。
我們考慮對一個演算法問題，什麼樣的回答是我們所需要的。比如搜尋問題：給定陣列



A


{\displaystyle A}

，和一個數



s


{\displaystyle s}

，我們要問



s


{\displaystyle s}

在不在



A


{\displaystyle A}

中（判定性問題，decision problem）。而進一步的，



s


{\displaystyle s}

如果在



A


{\displaystyle A}

中的話，



s


{\displaystyle s}

的位置是什麼（搜尋型問題，search problem）。再比如完美匹配問題（perfect matching）：給定一個二分圖



G
=
(
V
,
E
)


{\displaystyle G=(V,E)}

，我們問是不是存在邊集



E


{\displaystyle E}

，使得二分圖中每個結點恰好屬於該邊集的一條邊（判定型問題）。而進一步的，



E


{\displaystyle E}

存在的話，



E


{\displaystyle E}

具體是什麼（搜尋型問題）。
自然的，我們會發現對於一般的演算法問題



A


{\displaystyle A}

，我們都可以這樣來問：首先，解是不是存在的？其次，如果解存在，這個解具體是什麼？這就是



A


{\displaystyle A}

的判定型問題和



A


{\displaystyle A}

的搜尋型問題（又稱函式型問題）區分來源的直觀解釋。對判定型問題的回答只需是「是」或「否」，而對搜尋型問題，需要返回解的具體形式或者「解不存在」。所以一個對



A


{\displaystyle A}

的搜尋型問題的演算法自然的也是對



A


{\displaystyle A}

的判定型問題的演算法。反之，給定了一個



A


{\displaystyle A}

的判定型問題的演算法，是否存在



A


{\displaystyle A}

的搜尋型問題的演算法，在可計算性理論和計算複雜性理論中有著不同的回答，這也是理解計算複雜性理論與它的前身可計算性理論不同的一個基本的觀察。
在可計算性理論中，可以說明，判定型問題和搜尋型問題在可計算性的意義下是等價的（見Decision problem）。而在計算複雜性中，Khuller和Vazirani在1990年代證明了在P≠NP的假設下，平面圖4-著色問題的判定型問題是在P中的，而尋找其字典序第一的著色是NP難的。[1]
所以在可計算性理論中，只關注判定型問題是合理的。在計算複雜性理論中，雖然一些基本的複雜性類別（如P，NP和PSPACE），以及一些基本的問題（P和NP關係問題等）是用判定型問題來定義的，但函式型問題複雜性類別也被定義（如FP，FNP等），而且一些特別的函式型問題複雜性類別，如TFNP，也正在逐漸受到關注。
上面提到計算複雜性理論的研究物件是執行一項計算任務所用的資源，特別的，時間和空間是最重要的兩項資源。
我們用時間作例子來討論演算法分析的一些基礎知識。如果將輸入的長度（設為



n


{\displaystyle n}

）作為變數，而我們關注的是演算法執行時間與



n


{\displaystyle n}

的函式關係



T
(
n
)


{\displaystyle T(n)}

。因為一個演算法在不同的計算模型上實現時



T
(
n
)


{\displaystyle T(n)}

可能會有常數因子的差別（參見可計算性理論），我們使用大O表達式來表示



T
(
n
)


{\displaystyle T(n)}

，這使得我們可以忽略在不同計算模型上實現的常數因子。
以搜尋這個計算任務為例。在搜尋問題中，給定了一個具體的數



s


{\displaystyle s}

，和長度為



n


{\displaystyle n}

的陣列



A


{\displaystyle A}

（陣列中數的位置用1到



n


{\displaystyle n}

作標記），任務是當



s


{\displaystyle s}

在



A


{\displaystyle A}

中時，找到



s


{\displaystyle s}

的位置，而



s


{\displaystyle s}

不在



A


{\displaystyle A}

中時，需要報告"未找到"。這時輸入的長度即為



n
+
1


{\displaystyle n+1}

。下面的過程即是一個最簡單的演算法：我們依次掃過



A


{\displaystyle A}

中的每個數，並與



s


{\displaystyle s}

進行比較，如果相等即返回目前的位置，如果掃遍所有的數而演算法仍未停止，則返回"未找到"。
如果我們假設



s


{\displaystyle s}

在



A


{\displaystyle A}

中每個位置的機率都相同，那麼演算法在找到



s


{\displaystyle s}

的條件下需要





1
n


(
1
+
2
+
⋯
+
n
)
=



n
(
n
+
1
)


2
n



=



n
+
1

2




{\displaystyle {\frac {1}{n}}(1+2+\cdots +n)={\frac {n(n+1)}{2n}}={\frac {n+1}{2}}}

的時間。如果



s


{\displaystyle s}

不在



A


{\displaystyle A}

中，那麼需要



(
n
+
1
)


{\displaystyle (n+1)}

的時間。由大O表達式的知識我們知道演算法所需的時間即為



O
(
n
)


{\displaystyle O(n)}

。
而如果我們進一步假設



A


{\displaystyle A}

是已排序的，那麼我們有二分尋找演算法，使得演算法的執行時間是



O
(
log
⁡
n
)


{\displaystyle O(\log n)}

。可以看出執行一項計算任務，不同的演算法在執行時間上是有很大差異的。
將計算問題按照在不同計算模型下所需資源的不同予以分類，從而得到一個對演算法問題「難度」的類別，就是複雜性理論中複雜性類別概念的來源。例如一個問題如果在確定性圖靈機上所需時間不會超過一個確定的多項式（以輸入的長度為多項式的不定元），那麼我們稱這類問題的集合為P（polynomial time Turing machine）。而將前述定義中的「確定性圖靈機」改為「不確定性圖靈機」，那麼所得到的問題集合為NP（non-deteministic polynomial time Turing machine）。類似的，設



n


{\displaystyle n}

為輸入的長度，那我們可以定義「在確定性圖靈機上所需空間不超



O
(
log
⁡
n
)


{\displaystyle O(\log n)}

的演算法問題的集合」（即為



L


{\displaystyle L}

），「存在深度為



O
(
log
⁡
n
)


{\displaystyle O(\log n)}

，輸入的度（fan-in）為



O
(
1
)


{\displaystyle O(1)}

的電路族（circuit family）的演算法問題的集合」（即為NC1）等等複雜性類別。
定義複雜性類別問題的目的是為了將所有的演算法問題進行分類，以確定目前演算法的難度，和可能的前進方向。這是複雜性理論的一個主線之一：對演算法問題進行抽象和分類。例如透過大O表達式，我們可以對忽略因計算模型不同而引入的常數因子。而第二個重要的理論假設，就是將多項式時間作為有效演算法的標誌（與之對應的是指數時間）。這樣，複雜性類別使得我們可以忽略多項式階的不同而專注於多項式時間和指數時間的差別。（對多項式時間作為有效演算法的標誌這一點是有一定爭議的，比如，如果演算法的執行時間




n

10




{\displaystyle n^{10}}

，那它也可以看作是緩慢的，見理論與實踐。）在本文的其餘章節，「有效演算法」等價於「多項式演算法」
歸約（reduction）是將不同演算法問題建立聯絡的主要的技術手段，並且在某種程度上，定義了演算法問題的相對難度。簡單來說，假設我們有演算法任務



A


{\displaystyle A}

和



B


{\displaystyle B}

，如果我們想說「



A


{\displaystyle A}

比



B


{\displaystyle B}

簡單」（記為



A
≤
B


{\displaystyle A\leq B}

），它應該是什麼意思呢？從歸約的觀點來看，就是說如果我們有了



B


{\displaystyle B}

的有效演算法



M


{\displaystyle M}

，那麼我們有一個有效演算法



N


{\displaystyle N}

，它可以參照



M


{\displaystyle M}

，最終它要解決



A


{\displaystyle A}

問題。
我們以點集覆蓋問題（vertex cover）和獨立集問題（independent set）為例來進行說明。這兩個問題都是圖論中的問題。假設給定了無向圖



G
=
(
V
,
E
)


{\displaystyle G=(V,E)}

，和一個自然數



k


{\displaystyle k}

，點集覆蓋問題是要找到



V


{\displaystyle V}

的子集



S


{\displaystyle S}

，使得對



∀
e
∈
E


{\displaystyle \forall e\in E}

，有



s
∈
S


{\displaystyle s\in S}

，使得



s
∈
e


{\displaystyle s\in e}

，且




|

S

|

≤
k


{\displaystyle |S|\leq k}

；而獨立集問題也是要找



V


{\displaystyle V}

的子集



S


{\displaystyle S}

，要求是



∀

s

1


,

s

2


∈
S
,
(

s

1


,

s

2


)
∉
E


{\displaystyle \forall s_{1},s_{2}\in S,(s_{1},s_{2})\notin E}

，且




|

S

|

≤
k


{\displaystyle |S|\leq k}

。
一個簡單的觀察即是：對



G
=
(
V
,
E
)


{\displaystyle G=(V,E)}

，一個



S
⊂
V


{\displaystyle S\subset V}

是覆蓋點集，若且唯若



S


{\displaystyle S}

在



G


{\displaystyle G}

的補圖中是獨立點集（而且保持集合大小）。利用這個觀察，假設我們有了解決覆蓋點集問題的演算法



M


{\displaystyle M}

，我們設計解決獨立點集的演算法N如下：
可以看出若產生補圖這一步是有效的，那麼如果



M


{\displaystyle M}

有效，



N


{\displaystyle N}

也是有效的。一般的，如果我們有一個



B


{\displaystyle B}

有效的演算法



M


{\displaystyle M}

，和利用



B


{\displaystyle B}

作為「神諭」（oracle）的解決



A


{\displaystyle A}

問題的演算法



N


{\displaystyle N}

，那麼如果



N


{\displaystyle N}

是有效的，則我們有有效的解決



A


{\displaystyle A}

問題的演算法




N
′



{\displaystyle N'}

——只需將



N


{\displaystyle N}

中查詢B的操作換作具體的



M


{\displaystyle M}

演算法即可。而這一性質的基本解釋是：將多項式的不定元用另一個多項式代替，那麼得到的仍是一個多項式。
所以從歸約的觀點來看，下面的說法可以看作與「



A


{\displaystyle A}

比



B


{\displaystyle B}

簡單」（記為



A
≤
B


{\displaystyle A\leq B}

）等價：
計算複雜性理論最成功的成果之一是NP完備理論。通過該理論，我們可以理解為什麼在程式設計與生產實踐中遇到的很多問題至今沒有找到多項式演算法。而該理論更為計算複雜性中的核心問題：P與NP的關係問題指明了方向。
在上面我們已經知道，NP是指「在非確定性圖靈機上有多項式時間演算法的問題」的集合，而P是指「在確定性圖靈機上有多項式時間演算法的問題」的集合。這裡我們都考慮的是判定型問題，即考慮一個語言



L


{\displaystyle L}

，我們要判斷一個字串



x


{\displaystyle x}

是不是在



L


{\displaystyle L}

中。那麼，一個等價的理解是：NP是指對在



L


{\displaystyle L}

中的



x


{\displaystyle x}

，有多項式長度的證據



w


{\displaystyle w}

，而且對語言



(
x
,
w
)


{\displaystyle (x,w)}

是有多項式時間演算法的；而P是指對



L


{\displaystyle L}

中的



x


{\displaystyle x}

，有多項式時間演算法判斷



x


{\displaystyle x}

在不在



L


{\displaystyle L}

中。
舉個例子，就是考慮完美匹配問題、點集覆蓋問題和圖不同構問題。這三個問題都有圖論背影，問題的描述如下：
關於這三個問題，它們在複雜性理論中，目前的地位如下：
這樣我們有了：在P中、在NP而不知道是不是在P中、在AM中而不知道是不是在NP中的三個問題。
由於在多項式時間可以判斷



x


{\displaystyle x}

在不在



L


{\displaystyle L}

中，蘊含著



x


{\displaystyle x}

本身就是其在



L


{\displaystyle L}

中的證據的含義，所以P⊂NP。這個包含關係是不是嚴格的呢？或者說，是不是有語言



L
∈


{\displaystyle L\in }

NP，使得



L
∉


{\displaystyle L\notin }

P？這就是著名的NP與P關係問題。從這個問題在1970年代被正式的提出之後，有NP完備理論賦予了它在實踐上的重要性，有證明複雜性理論賦予了它純數學理論上的重要性，有PCP理論和NP完備理論賦予了它演算法理論上的重要性。這些理論或者在根本上依賴於NP和P關係問題的某些假設，或者本身就是試圖去理解NP和P關係問題而發展出來的，這使得它成為了理論電腦科學乃至數學的中心問題之一。在2000年，克雷數學研究所 提出了新世紀的數學中七個中心問題，NP與P關係問題就是其中的一個。
關於NP與P關係問題最早發展出的理論是NP完備理論。我們在下面一節簡單了解NP完備理論。
由上面歸約的知識我們知道，演算法問題之間可以根據歸約來定義相對的難度。即對問題



A


{\displaystyle A}

和問題



B


{\displaystyle B}

，我們認為



A


{\displaystyle A}

比



B


{\displaystyle B}

簡單，記為



A
≤
B


{\displaystyle A\leq B}

，就是存在使用



B


{\displaystyle B}

問題解來解決



A


{\displaystyle A}

問題的演算法



M


{\displaystyle M}

，且



M


{\displaystyle M}

是多項式時間的。那麼，在一個複雜性類別中，有沒有可能存在「最難的問題」呢？具體的對NP，就是說是不是存在問題



A
∈


{\displaystyle A\in }

NP，使得對



∀
B
∈


{\displaystyle \forall B\in }

NP，有



B
≤
A


{\displaystyle B\leq A}

呢？對這樣的問題，我們稱它是NP完備的。
這個問題乍看起來很不容易把握。因為這需要對所有的NP中的語言L，去找到一個L到A的歸約演算法。然而1970年代的由史蒂芬·庫克和列昂尼德·列文分別發現的庫克-列文定理，證明了布林表達式（Boolean formula）的可滿足性問題（SAT問題）是NP完備的。概括的說，他們證明了，有一個通用的過程對NP中任意語言在非確定性圖靈機上執行歷史用布林表達式來編碼，使得該布林表達式是可滿足的，若且唯若該執行歷史是對給定輸入，接受該輸入的。這樣，我們就有了第一個被證明是NP完備的問題。
在庫克給出SAT問題是NP完備之後不久，理察·卡普證明了21個圖論、組合數學中常見的問題都是NP完備的。這賦予了NP完備問題在實踐中的重要性。現在，已經有成千個在實踐中遇到的演算法問題被證明是NP完備的（參見NP完備問題列表），特別的有許多問題，如旅行商問題等的最佳演算法會帶來很大的經濟效益（旅行商問題的最佳解可以給出最佳的電路布線方案，而SAT的最佳演算法會促行程序驗證等問題的進步）。由NP完備的定義，我們知道對這其中任何一個問題的多項式演算法都將給出所有NP問題，也包括所有NP完備問題的多項式演算法。然而儘管實際問題中遇到很多NP完備的問題，而且有很多問題在不同領域有著相當的重要性而被大量研究，至今，仍沒有對NP完備問題的多項式演算法，這是一些理論電腦科學家認為NP≠P的理由之一。
對NP和P關係問題，NP完備理論給出了如下的暗示：如果要證明NP=P，一個可能的方向是對NP完備問題給出多項式演算法；如果要證明NP≠P，那麼必然的一個結果是NP完備問題沒有多項式演算法。
電路複雜性理論在1990年代以前，被眾多研究者認為是解決NP與P關係問題的可能的途徑之一。電路複雜性研究的物件是非一致性的計算模型電路，並考慮計算一個布林函式所需的最小的電路的深度（depth）和大小（size）等資源。其中，大小為多項式大小的電路族可以計算的布林函式被記為P/poly。可以證明，P包含在P/poly之中，而卡普-利普頓定理（Karp-Lipton theorem）表明若P/poly在NP之中，則多項式層級（polynomial hierarchy）將會坍縮至第二層，這是一個不大可能的結果。這兩個結果結合起來表明，P/poly可以當作是分離NP與P的一個中間的工具，具體的途徑就是證明任一個NP完全問題的電路大小的下界。在直觀上說，電路複雜性也繞過了NP與P問題的第一個困難：相對化證明困難（relativizing proofs）。
在1980年代，電路複雜性途逕取得了一系列的成功，其中包括奇偶性函式（Parity function）在



A

C

0




{\displaystyle AC^{0}}

中的下界為指數，以及團問題（clique problem）在單調性電路（monotone circuit）中的下界為指數。然而在1994年Razborov（英語：Alexander Razborov）和Rudich（英語：Steven Rudich）的著名論文自然性證明（Natural proof）中指出，上面所用證明電路下界的方法，在單向函式存在的前提下是不可能分離NP和P的。該結果使很多專家對證明電路下界來分離NP和P的前景表示不樂觀。
計算複雜性的初衷是理解不同演算法問題的難度，特別的是一些重要演算法問題的困難性。為了確切的描述一個問題的困難性，計算複雜性的第一步抽象是認為多項式時間是有效的，非多項式時間是困難的。這基於指數函式增長速度的「違反直覺」的特性：如果一個演算法的時間複雜性為




2

n




{\displaystyle 2^{n}}

，取輸入的規模是100，在運算速度是




10

12




{\displaystyle 10^{12}}

每秒（關於CPU速度，參見Instructions per second，其中報告截止2009年，主流個人電腦的運算速度可以看作是



4
×

10

10




{\displaystyle 4\times 10^{10}}

每秒）的情況下，該程式將會執行



4
×

10

10




{\displaystyle 4\times 10^{10}}

年，幾乎是宇宙年齡。這為多項式時間被看作是有效時間提供了直觀上的證據。
然而多項式的指數很大的時候，演算法在實踐中也不能看作是有效的。如




n

10




{\displaystyle n^{10}}

的多項式演算法，取問題規模大小為1000，那麼幾乎就是




2

100




{\displaystyle 2^{100}}

的大小。另一方面，即便一個問題沒有多項式演算法，它可能會有近似比很好的近似演算法（參見近似演算法），或有很好的啟發式演算法（heuristics）。啟發式演算法的特點是在理論上沒有精確的行為的分析，或者可以表明存在很壞的輸入，在這些輸入上執行很慢。然而在大多數時候，它都能快速解決問題。計算複雜性中對應的理論分析是平均複雜性理論（average-case complexity theory）和光滑分析（smooth analysis）。實際中的例子包括Presburger arithmetic（英語：Presburger arithmetic）、布林可滿足性問題（參見SAT solver）和背包問題。
電腦（亦稱電子計算機）是利用數位電子技術，根據一系列指令指示並且自動執行任意算術或邏輯操作序列的裝置。通用電腦因有能遵循被稱為「程式」的一般操作集的能力而使得它們能夠執行極其廣泛的任務。
電腦被用作各種工業和消費裝置的控制系統。這包括簡單的特定用途裝置（如微波爐和遙控器）、工業裝置（如工業機器人和電腦輔助設計），及通用裝置（如個人電腦和智慧型手機之類的行動裝置）等。儘管電腦種類繁多，但根據圖靈機理論，一部具有著基本功能的電腦，應當能夠完成任何其它電腦能做的事情。因此，理論上從智慧型手機到超級電腦都應該可以完成同樣的作業（不考慮時間和儲存因素）。由於科技的飛速進步，下一代電腦總是在效能上能夠顯著地超過其前一代，這一現象有時被稱作「摩爾定律」。通過網際網路，電腦互相連接，極大地提高了資訊交換速度，反過來推動了科技的發展。在21世紀的現在，電腦的應用已經涉及到方方面面，各行各業了。
自古以來，簡單的手動裝置——就像算盤——幫助人們進行計算。在工業革命初期，各式各樣機械的出現，而初衷都是為了自動完成冗長而乏味的任務，例如織機的編織圖案。更複雜的機器在20世紀初出現，通過類比電路進行複雜特定的計算。第一台數位電腦出現於二戰期間。自那時以來，電腦的速度，功耗和多功能性則不斷增加。在現代，機械計算機的應用已經完全被電腦所取代。
電腦在組成上形式不一，早期電腦的天依然有大量體積龐大的巨型電腦為特別的科學計算或面向大型組織的事務處理需求服務。比較小的，為個人應用而設計的稱為微型電腦（Personal Computer，PC），在中國地區簡稱為「微機」。我們今天在日常使用「電腦」一詞時通常也是指此，不過現在電腦最為普遍的應用形式卻是嵌入式，嵌入式電腦通常相對簡單、體積小，並被用來控制其它裝置——無論是飛機、工業機器人還是數位相機[1]。
同電腦相關的技術研究叫電腦科學，而「電腦技術」指的是將計算機科學的成果應用於工程實踐所衍生的諸多技術性和經驗性成果的總合。「電腦技術」與「電腦科學」是兩個相關而又不同的概念，它們的不同在於前者偏重於實踐而後者偏重於理論。至於由資料為核心的研究則稱為資訊科技。
傳統上，現代電腦包含至少一個處理單元（通常是中央處理器（CPU））和某種形式的記憶體。處理元件執行算術和邏輯運算，並且排序和控制單元可以回應於儲存的資訊改變操作的順序。外圍裝置包括輸入裝置（鍵盤，滑鼠，操縱杆等）、輸出裝置（顯示器螢幕，印表機等）以及執行兩種功能（例如觸控式螢幕）的輸入/輸出裝置。外圍裝置允許從外部來源檢索資訊，並使操作結果得以儲存和檢索。
本來，電腦的英文原詞「computer」是指從事資料計算的人。而他們往往都需要藉助某些機械計算裝置或類比電腦。
這些早期計算裝置的祖先包括有算盤，以及可以追溯到公元前87年的被古希臘人用於計算行星移動的安提基特拉機械。隨著中世紀末期歐洲數學與工程學的再次繁榮，1623年德國博學家Wilhelm Schickard（德語：Wilhelm Schickard）率先研製出了歐洲第一部計算裝置，這是一個能進行六位以內數加減法，並能通過鈴聲輸出答案的「計算鐘」。使用轉動齒輪來進行操作。
1642年法國數學家布萊士·帕斯卡在英國數學家William Oughtred所製作的「計算尺」的基礎上，將其加以改進，使能進行八位計算。還賣出了許多製品，成為當時一種時髦的商品。
1801年，法國人約瑟夫·瑪麗·雅卡爾對織布機的設計進行改進，使用一系列打孔的紙卡片來作為編織複雜圖案的程式。儘管這種被稱作「雅卡爾織布機」的機器並不被認為是一部真正的電腦，但是其可程式化性質使之被視為現代電腦發展過程中重要的一步。
查爾斯·巴貝奇於1820年構想和設計了第一部完全可程式化電腦。但由於技術條件、經費限制，以及無法忍耐對設計不停的修補，這部電腦在他有生之年始終未能問世。約到19世紀晚期，許多後來被證明對電腦科學有著重大意義的技術相繼出現，包括打孔卡片以及真空管。德裔美籍統計學家赫爾曼·何樂禮設計了一部制表用的機器，其中便應用打孔卡片來進行大規模自動資料處理。
在20世紀前半葉，為了迎合科學計算的需要，許多專門用途的、複雜度不斷增長的類比電腦被研製出來。這些電腦都是用它們所針對的特定問題的機械或電子模型作為計算基礎。1930－1940年代，電腦的效能逐漸強大並且通用性得到提升，現代電腦的關鍵特色被不斷地加入進來。
1937年，年僅21歲的麻省理工學院研究生克勞德·夏農發表了他的重要論文《對繼電器和開關電路中的符號分析》，文中首次提及數位電子技術的應用。他向人們展示了如何使用開關來實現邏輯和數學運算。此後，他通過研究萬尼瓦爾·布希的微分模擬器（英語：differential analyser）進一步鞏固了他的想法。這是一個標誌著二進位電子電路設計和邏輯閘應用開始的重要時刻，而這些關鍵思想誕生的先驅，應當包括：阿爾蒙·斯特羅格，他為一個含有邏輯閘電路的裝置申請了專利；尼古拉·特斯拉，他早在1898年就曾申請含有邏輯閘的電路裝置；李·德富雷斯特，於1907年他用真空管代替了繼電器。
沿著這樣一條上下求索的漫漫長途去定義所謂的「第一部電腦」可謂相當困難。1941年5月12日，德國工程師康拉德·楚澤完成了他的圖靈完備機電一體電腦「Z3」，這是第一部具有自動二進位數學計算特色以及可行的程式化功能的電腦，但還不是「電子」電腦。此外，其他值得注意的成就主要有：
1941年夏天誕生的阿塔納索夫-貝瑞電腦是世界上第一部電腦，它使用了真空管計算機，二進位數值，可復用記憶體；在英國於1943年被展示的神秘的巨像電腦（Colossus computer），儘管程式化能力極為有限，但是它使人們確信使用真空管既值得信賴，又能實現電氣化的再編程；哈佛大學的馬克一號；以及基於二進位的ENIAC，全名為電子數值積分計算器，這是第一部通用意圖的電腦，但由於其結構設計不夠彈性化，導致對它的每一次再編程都要重新連接電子線路。
1940年代的第二次世界大戰中，為訓練轟炸機飛行員，美國海軍曾向麻省理工學院探詢，是否能夠開發出一款可以控制飛行模擬器的計算機。軍方當初的設想只是希望經由該計算機將飛行員類比操作產生的資料即時反映到儀表盤上。和以前的訓練系統林克訓練機不同，軍方計劃系統能儘可能真實地根據空氣動力學模型進行類比，以使其能適用於各種不同類型的飛機。於是麻省理工創造了旋風工程，其製造出了世界上第一臺能夠即時處理資料的旋風電腦，併發明了磁芯儲存裝置。這為個人電腦的發展做出了歷史性的貢獻。
開發埃尼阿克的小組針對其缺陷又進一步改善了設計，並最終呈現出今天我們所熟知的馮·紐曼結構（程式儲存體系結構）。這個體系是當今所有電腦的基礎。
20世紀40年代中晚期，大批基於此一體系的電腦開始研製，其中以英國最早。儘管第一部研製完成並投入運轉的是小規模實驗機（Small-Scale Experimental Machine，SSEM），但真正被開發出來的實用機很可能是延遲儲存電子自動計算機（EDSAC）。
在整個1950年代，真空管電腦居於統治地位。1958年9月12日在後來英特爾的創始人羅伯特·諾伊斯的領導下，發明了積體電路。
不久又推出了微處理器。1959年到1964年間設計的計算機一般稱為第二代計算機。
到了1960年代，電晶體電腦將其取而代之。電晶體體積更小，速度更快，價格更加低廉，效能更加可靠，這使得它們可以商品化生產。
1964年到1972年的計算機一般被稱為第三代計算機。大量使用積體電路，典型的機型是IBM360系列。
到了1970年代，積體電路技術的引入大大地降低了電腦生產成本，電腦也從此開始走向千家萬戶。1972年以後的計算機習慣上被稱為第四代計算機。基於大規模積體電路，及後來的超大規模積體電路。Intel 4004是美國英特爾公司 (Intel) 推出的第1款微處理器，也是全球第一款微處理器；1971年11月15日發布。1972年4月1日，INTEL推出8008微處理器。1976年，史蒂夫·賈伯斯和斯蒂夫·沃茲尼亞克創辦蘋果計算機公司。並推出其Apple I計算機。1977年5月Apple II型計算機發布。1979年6月1日INTEL，發布了8位元的8088微處理器。
1982年，微電腦開始普及，大量進入學校和家庭。1982年1月Commodore 64計算機發布，價格595美元。
1982年2月Intel 80286發布。時脈提高到20MHz，並增加了保護模式，可存取640KB記憶體。支援1MB以上的虛擬記憶體。每秒執行270萬條指令，整合了134000個電晶體。
1990年11月，微軟發布第一代MPC（Multimedia PC，多媒體個人電腦標準）：處理器至少為80286/12 MHz（後來增加到80386SX/16 MHz），有光碟機，傳輸率不少於150 KB/sec。
1994年10月10日Intel發布75MHzPentium處理器。1995年11月1日，Pentium Pro發布。主頻可達200MHz，每秒鐘完成4.4億條指令，整合了550萬個電晶體。1997年1月8日Intel發布Pentium MMX，對遊戲和多媒體功能進行了增強。
此後計算機的變化日新月異，1965年發表的摩爾定律不斷被認證，預測在未來10—15年仍依然適用。
儘管電腦技術自20世紀40年代第一部電子通用電腦誕生以來以來有了令人目眩的快速發展，但是今天電腦仍然基本上採用的是儲存程序結構，即馮·紐曼結構。這個結構實現了實用化的通用電腦。
儲存程序結構將一部電腦描述成四個主要部分：算術邏輯單元、控制電路、記憶體及輸入輸出裝置。這些部件通過一組一組的排線連接（特別地，當一組線被用於多種不同意圖的資料傳輸時又被稱為匯流排），並且由一個時鐘來驅動（當然某些其他事件也可能驅動控制電路）。
概念上講，一部電腦的記憶體可以被視為一組「細胞」單元。每一個「細胞」都有一個編號，稱為位址；又都可以儲存一個較小的定長資訊。這個資訊既可以是指令（告訴電腦去做什麼），也可以是資料（指令的處理物件）。原則上，每一個「細胞」都是可以儲存二者之任一的。
算術邏輯單元（ALU）可以被稱作電腦的大腦。它能做兩類運算：
第一類是算術運算，比如對兩個數位進行加減法。算術運算部件的功能在ALU中是十分有限的，事實上，
一些ALU根本不支援電路級的乘法和除法運算（由是使用者只能通過編程進行乘除法運算）。第二類是比較運算，即給定兩個數，
ALU對其進行比較以確定哪個更大一些。[2]
輸入輸出系統是電腦從外部世界接收資訊和向外部世界回饋運算結果的手段。對於一部標準的個人電腦，輸入裝置主要有鍵盤和滑鼠，輸出裝置則是顯示器、印表機以及其他許多後文將要討論的可連接到電腦上的I/O裝置。
控制系統將以上電腦各部分聯絡起來。它的功能是從記憶體和輸入輸出裝置中讀取指令和資料，對指令進行解碼，
並向ALU交付符合指令要求的正確輸入，告知ALU對這些資料做哪些運算並將結果資料返回到何處。控制系統中一個重要組件就是一個用來保持跟蹤目前指令所在位址的計數器。
通常這個計數器隨著指令的執行而累加，但有時如果指令指示進行跳轉則不依此規則。
20世紀80年代以來ALU和控制單元（二者合稱中央處理器）逐漸被整合到一塊積體電路上，稱作微處理器。
這類電腦的工作模式十分直觀：在一個時鐘周期內，電腦先從記憶體中取得指令和資料，然後執行指令，儲存資料，再取得下一條指令。這個過程被反覆執行，直至得到一個終止指令。
由控制器解釋，運算器執行的指令集是一個精心定義的數目十分有限的簡單指令集合。一般可以分為四類：1）、資料移動
（如：將一個數值從儲存單元A拷貝到儲存單元B）2）、數邏運算（如：計算儲存單元A與儲存單元B之和，結果返回儲存單元C）3）、
條件驗證（如：如果儲存單元A內數值為100，則下一條指令位址為儲存單元F）4）、指令序列改易（如：下一條指令位址為儲存單元F）
指令如同資料一樣在電腦內部是以二進位來表示的。比如說，10110000就是一條Intel x86系列微處理器的拷貝指令代碼。
某一個電腦所支援的指令集就是該電腦的機器語言。因此，使用流行的機器語言將會使既成軟體在一部新電腦上執行得更加容易。所以對於那些機型商業化軟體開發的人來說，它們通常只會關注一種或幾種不同的機器語言。
更加強大的小型電腦，大型電腦和伺服器可能會與上述電腦有所不同。它們通常將任務分擔給不同的CPU來執行。今天，
微處理器和多核個人電腦也在朝這個方向發展。[2]
超級電腦通常有著與基本的儲存程序電腦顯著區別的體系結構。它們通常有著數以千計的CPU，
不過這些設計似乎只對特定任務有用。在各種電腦中，還有一些微控制器採用令程式和資料分離的哈佛架構（Harvard architecture）。
以上所說這一些概念性設計的物理實現是多種多樣的。如同我們前述所及，一部儲存程序式電腦既可以是巴比奇的機械式的，
也可以是基於數位電子的。但是，數位電路能通過諸如繼電器之類的電子控制開關來實現使用2進位數的算術和邏輯運算。
夏農的論文正是向我們展示了如何排列繼電器來組成能夠實現簡單布林運算的邏輯閘。其他一些學者很快指出使用真空管可以代替繼電器電路。
真空管最初被用作無線電電路中的放大器，之後便開始被越來越多地用作數位電子電路中的快速開關。當電子管的一個針腳被通電後，電流就可以在另外兩端間自由通過。
通過邏輯閘的排列組合我們可以設計完成很多複雜的任務。舉例而言，加法器就是其中之一。
該器件在電子領域實現了兩個數相加並將結果儲存下來—在電腦科學中這樣一個通過一組運算來實現某個特定意圖的方法被稱做一個演算法。
最終，人們通過數量可觀的邏輯閘電路組裝成功了完整的ALU和控制器。說它數量可觀，只需看一下CSIRAC這部可能是最小的實用化電子管電腦。
該機含有2000個電子管，其中還有不少是雙用器件，也即是說總計合有2000到4000個邏輯裝置。
真空管對於製造規模龐大的閘電路明顯力不從心。昂貴，不穩（尤其是數量多時），臃腫，能耗高，並且速度也不夠快—儘管遠超機械開關電路。
這一切導致20世紀60年代它們被電晶體取代。後者體積更小，易於操作，可靠性高，更省能耗，同時成本也更低。
20世紀60年代後，電晶體開始逐漸為將大量電晶體、其他各種電器元件和連接導線安置在一片矽板上的積體電路所取代。
70年代，ALU和控制器作為組成CPU的兩大部分，開始被整合到一塊晶片上，並稱為「微處理器」。沿著積體電路的發展史，可以看到一片晶片上所整合器件的數量有了飛速增長。第一塊積體電路只不過包含幾十個部件，而到了2015年，一塊Intel Core i7處理器上的電晶體數目高達十九億之巨。
無論是電子管，電晶體還是積體電路，它們都可以通過使用一種正反器設計機制來用作儲存程序體系結構中的「儲存」部件。
而事實上正反器的確被用作小規模的超高速儲存。但是，幾乎沒有任何電腦設計使用正反器來進行大規模資料儲存。
最早的電腦是使用Williams電子管向一個電視屏或若干條水銀延遲線（聲波通過這種線時的走行速度極為緩慢足夠被認為是「儲存」在了上面）
發無線電子束然後再來讀取的方式來儲存資料的。當然，這些儘管有效卻不怎麼優雅的方法最終還是被磁性儲存取而代之。比如說磁芯記憶體，
代表資訊的電流可在其中的鐵質材料內製造恆久的弱磁場，當這個磁場再被讀出時就實現了資料恢復。動態隨機存取記憶體亦被發明出來。它是一個包含大量電容的積體電路，而這些電容器件正是負責儲存資料電荷—電荷的強度則被定義為資料的值。
輸入輸出裝置（I/O）是對將外部世界資訊傳送給電腦的裝置和將處理結果返回給外部世界的裝置的總稱。
這些返回結果可能是作為使用者能夠視覺上體驗的，或是作為該電腦所控制的其他裝置的輸入：對於一部機器人，控制電腦的輸出基本上就是這部機器人本身，如做出各種行為。
第一代電腦的輸入輸出裝置種類非常有限。通常的輸入用裝置是打孔卡片的讀卡機，用來將指令和資料匯入記憶體；而用於儲存結果的輸出裝置則一般是磁帶。隨著科技的進步，輸入輸出裝置的豐富性得到提高。以個人電腦為例：鍵盤和滑鼠是用戶向電腦直接輸入資訊的主要工具，而顯示器、印表機、擴音器、耳機則返回處理結果。此外還有許多輸入裝置可以接受其他不同種類的資訊，如數位相機可以輸入圖像。在輸入輸出裝置中，有兩類很值得注意：第一類是二級儲存裝置，如硬碟，光碟或其他速度緩慢但擁有很高容量的裝置。第二個是電腦網路存取裝置，通過他們而實現的電腦間直接資料傳送極大地提升了電腦的價值。今天，國際網際網路成就了數以千萬計的電腦彼此間傳送各種類型的資料。
簡單說，電腦程式就是電腦執行指令的一個序列。它既可以只是幾條執行某個簡單任務的指令，也可能是可能要操作巨巨量資料量的複雜指令佇列。許多電腦程式包含有百萬計的指令，而
其中很多指令可能被反覆執行。在2005年，一部典型的個人電腦可以每秒執行大約30億條指令。電腦通常並不會執行一些很複雜的指令來獲得額外的機能，更多地它們是在按照程式設計師的排列來執行那些較簡單但為數眾多的短指令。
一般情況下，程式設計師們是不會直接用機器語言來為電腦寫入指令的。那麼做的結果只能是費時費力、效率低下而且漏洞百出。
所以，程式設計師一般通過「進階」一些的語言來寫程式，然後再由某些特別的電腦程式，如直譯器或編譯器將之翻譯成機器語言。
一些程式語言看起來很接近機器語言，如組譯程式，被認為是低階語言。而另一些語言，如即如抽象原則的Prolog，則完全無視電腦實際執行的操作細節，可謂是高階語言。對於一項特定任務，應該根據其事務特點，程式設計師技能，可用工具和客戶需求來選擇相應的語言，其中又以客戶需求最為重要（美國和中國軍隊的工程專案通常被要求使用Ada語言）。
電腦軟體是與電腦程式並不相等的另一個詞彙。電腦軟體一個較為包容性較強的技術術語，它包含了用於完成任務的各種程式以及所有相關材料。舉例說，一個電動遊戲不但只包含程式本身，也包括圖片、聲音以及其他創造虛擬遊戲環境的資料內容。在零售市場，在一部電腦上的某個應用程式只是一個面向大量用戶的軟體的一個副本。這裡老生常談的例子當然還是微軟的office軟體組，它包括一系列互相關聯的、面向一般辦公需求的程式。
利用那些極其簡單的機器語言指令來實現無數功能強大的應用軟體意味著其編程規模註定不小。Windows XP這個作業系統程式包含的C++高階語言原始碼達到了4000萬行。當然這還不是最大的。如此龐大的軟體規模也顯示了管理在開發過程中的重要性。實際編程時，程式會被細分到每一個程式設計師都可以在一個可接受的時長內完成的規模。
即便如此，軟體開發的過程仍然行程緩慢，不可預見且遺漏多多。應運而生的軟體工程學就重點面向如何加快作業進度和提高效率與品質。
在電腦誕生後不久，人們發現某些特定作業在許多不同的程式中都要被實施，比如說計算某些標準數學函式。出於效率考量，這些程式的標準版本就被收集到一個「庫」中以供各程式呼叫。許多工經常要去額外處理種類繁多的輸入輸出介面，這時，用於連接的庫就能派上用場。
20世紀60年代，隨著電腦工業化普及，電腦越來越多地被用作一個組織內不同作業的處理。很快，能夠自動安排作業時續和執行的特殊軟體出現了。這些既控制硬體又負責作業時序安排的軟體被稱為「作業系統」。一個早期作業系統的例子是IBM的OS/360。
在不斷地完善中，作業系統又引入了時間共享機制——並行。這使得多個不同用戶可以「同時」地使用機器執行他們自己的程式，看起來就像是每個人都有一部自己的電腦。為此，作業系統需要向每個用戶提供一部「虛擬機器」來分離各個不同的程式。由於需要作業系統控制的裝置也在不斷增加，其中之一便是硬碟。因之，作業系統又引入了檔案管理和目錄管理（資料夾），大大簡化了這類永久儲存性裝置的應用。此外，作業系統也負責安全控制，確保用戶只能存取那些已獲得允許的檔案。
當然，到目前為止作業系統發展歷程中最後一個重要步驟就是為程式提供標準圖形化使用者介面。
儘管沒有什麼技術原因表明作業系統必須得提供這些介面，但作業系統供應商們總是希望並鼓勵那些執行在其系統上的軟體能夠在外觀和行為特徵上與作業系統保持一致或相似。
除了以上這些核心功能，作業系統還封裝了一系列其他常用工具。其中一些雖然對電腦管理並無重大意義，但是於用戶而言很是有用。比如，蘋果公司的Mac OS X就包含視訊剪輯應用程式。
一些用於更小規模的電腦的作業系統可能沒用如此眾多的功能。早期的微型電腦由於記憶體和處理能力有限而不會提供額外功能，而嵌入式電腦則使用特定化了的作業系統或者乾脆沒有，它們往往通過應用程式直接代理作業系統的某些功能。
起初，體積龐大而價格昂貴的數位電腦主要是用做執行科學計算，特別是軍用課題。如ENIAC最早就是被用作火炮彈計算和設計氫彈時計算斷面中子密度的（如今許多超級電腦仍然在類比核試驗方面發揮著巨大作用）。澳大利亞設計的首部儲存程序電腦CSIR Mk I型負責對水電工程中的集水地帶的降雨情形進行評估。還有一些被用於解密，比如英國的「巨像」可程式化電腦。除去這些早年的科學或軍工應用，電腦在其他領域的推廣亦十分迅速。
從一開始，儲存程序電腦就與商業問題的解決息息相關。早在IBM的第一部商用電腦誕生之前，
英國J. Lyons等就設計製造了LEO以進行資產管理或迎合其他商業用途。由於持續的體積與成本控制，電腦開始向更小型的組織內普及。加之20世紀70年代微處理器的發明，廉價電腦成為了現實。80年代，個人電腦全面流行，電子文件寫作與印刷，計算預算和其他重複性的報表作業越來越多地開始依賴電腦。
隨著電腦便宜起來，創作性的藝術工作也開始使用它們。人們利用合成器，電腦圖形和動畫來創作和修改聲音，圖像，視訊。電動遊戲的產業化也說明了電腦在娛樂方面也開創了新的歷史。
電腦小型化以來，機械裝置的控制也開始仰仗電腦的支援。其實，正是當年為了建造足夠小的嵌入式電腦來控制阿波羅1號才刺激了積體電路技術的躍進。今天想要找一部不被電腦控制的主動機械裝置要比找一部哪怕是部分電腦控制的裝置要難得多。可能最著名的電腦控制裝置要非機器人莫屬，這些機器有著或多或少人類的外表和並具備人類行為的某一子集。在批次生產中，工業機器人已是尋常之物。不過，完全的擬人機器人還只是停留在科幻小說或實驗室之中。
機器人技術實質上是人工智慧(AI人工智慧)領域中的物理表達環節。所謂人工智慧(AI人工智慧)是一個定義模糊的概念但是可以肯定的是這門學科試圖令電腦擁有目前它們還沒有但作為人類卻原生的能力。數年以來，不斷有許多新方法被開發出來以允許電腦做那些之前被認為只有人才能做的事情。比如讀書、下棋。然而，到目前為止，在研製具有人類的一般「整體性」智慧型的電腦方面，進展仍十分緩慢。
20世紀50年代以來電腦開始用作協調來自不同地方之資訊的工具，美國軍方的賢者系統（SAGE）就是這方面第一個大規模系統。之後「軍刀」等一系列特殊用途的商業系統也不斷湧現出來。
70年代後，美國各大院校的電腦工程師開始使用電信技術把他們的電腦連接起來。由於這方面的工作得到了ARPA的贊助，其電腦網路也就被稱為ARPANET。此後，用於ARPA網的技術快速擴散和進化，這個網路也衝破大學和軍隊的範圍最終形成了今天的網際網路。網路的出現導致了對電腦屬性和邊界的再定義。昇陽電腦公司的John Gage和Bill Joy就指出：「網路即是電腦」。電腦作業系統和應用程式紛紛向能存取諸如網內其它電腦等網路資源的方向發展。最初這些網路裝置僅限於為高階科學工作者所使用，但90年代後隨著電子郵件和全球資訊網技術的擴散，以及乙太網路和ADSL等網路連接技術的廉價化，網際網路已變得無所不在。今日入網的電腦總數，何止以千萬計；無線互聯技術的普及，使得網際網路在移動計算環境中亦如影隨形。比如在筆記本電腦上廣泛使用的Wi-Fi技術就是無線上網的代表性應用。
90年代之後，在電話數據機MODEM 技術成熟後，由窄頻的電話撥接，升級成為寬頻資料，這代表網路新時代來臨，由慢跑的速度改變而成開車的速度，也同時改變電腦使用者習慣，更大大普及網路連絡傳訊的方式，如即時通或SKYPE等等，以往只能文字傳訊提升至影音傳輸；而雲端、巨量資料時代造就了各種新型態行業，如網路商店、網路電商、網路拍賣、網路銷售、網路遊戲、網路設計及架設，以及越來越普遍性的雲端資料資料庫或備份庫，正在時時最佳化及改變現有人類的生活。
自問世以來數位電腦在速度和能力上有了可觀的提升，迄今仍有不少課題顯得超出了目前電腦的能力所及。
對於其中一部分課題，傳統電腦是無論如何也不可能實現的，因為找到一個解決方法的時間還趕不上問題規模的擴充速度。因此，科學家開始將目光轉向生物計算技術和量子理論來解決這一類問題。比如，人們計劃用生物性的處理來解決特定問題（DNA計算）。由於細胞分裂的指數級增長方式，DNA計算系統很有可能具備解決同等規模問題的能力。當然，這樣一個系統直接受限於可控制的DNA總量。
量子電腦，顧名思義，利用了量子物理世界的超常特性。一旦能夠造出量子電腦，那麼它在速度上的提升將令一般傳統電腦難以望其項背。[3]
在當今世界，幾乎所有專業都與電腦息息相關。但是，只有某些特定職業和學科才會深入研究電腦本身的製造、編程和使用技術,用來詮釋電腦學科內不同研究領域的各個學術名詞的涵義不斷發生變化，同時新學科也層出不窮。
許多學科都與其他學科相互交織。如地理資訊系統專家就是利用電腦技術來管理地理資訊。
全球有三個較大規模的致力於電腦科學的組織：英國電腦學會；美國電腦協會（ACM）；美國電機電子工程師協會。
演算法（algorithm），在數學（算學）和電腦科學之中，為任何一系列良定義的具體計算步驟[1]，常用於計算、資料處理（英語：Data processing）和自動推理。作為一個有效方法（英語：Effective method），演算法被用於計算函式[2]，它包含了一系列定義清晰的指令[3]，並可於有限的時間及空間內清楚的表述出來[4]。
演算法中的指令描述的是一個計算，當其執行（英語：Execution (computing)）時能從一個初始狀態和初始輸入（可能爲空）開始，[5]經過一系列有限[6]而清晰定義的狀態最終產生輸出[7]並停止於一個終態。一個狀態到另一個狀態的轉移不一定是確定的。包括隨機化演算法在內的一些演算法，都包含了一些隨機輸入。[8][9]
早在嘗試解決希爾伯特提出的判定問題時，關於演算法的一個不完全的概念已經初步定型，並在其後的正式化階段中嘗試定義「有效可計算性（英語：Effective calculability）[10]」或者「有效方法（英語：Effective method）[11]」。這些嘗試包括庫爾特·哥德爾、雅克·埃爾布朗和史蒂芬·科爾·克萊尼分別於1930年、1934年和1935年提出的遞迴函式，阿隆佐·邱奇於1936年提出的λ演算，1936年埃米爾·萊昂·珀斯特（英語：Emil Leon Post）的Formulation 1和艾倫·圖靈1937年提出的圖靈機。即使在當下，依然常有符合直覺的想法難以定義爲形式化演算法的情況。[12]
演算法在中國古代文獻中稱為「術」，最早出現在《周髀算經》、《九章算術》。特別是《九章算術》，給出四則運算、最大公約數、最小公倍數、開平方根、開立方根、求素數的埃拉托斯特尼篩法，線性方程組求解的演算法。三國時代的劉徽給出求圓周率的演算法：劉徽割圓術。
自唐代以來，歷代更有許多專門論述「算法」的專著：
而英文名稱「algorithm」來自於9世紀波斯數學家花拉子米（比阿勒·霍瓦里松，波斯語：خوارزمی ‎，拉丁轉寫：al-Khwarizmi），因為比阿勒·霍瓦里松在數學上提出了演算法這個概念。「演算法」原為「algorism」，即「al-Khwarizmi」的音轉，意思是「花拉子米」的運演算法則，在18世紀演變為「algorithm」。
歐幾里得演算法被人們認為是史上第一個演算法。
第一次編寫程式是愛達·勒芙蕾絲（Ada Byron）於1842年為巴貝奇分析機編寫求解解伯努利微分方程的程式，因此愛達·勒芙蕾絲被大多數人認為是世界上第一位程式設計師[13]。因為查爾斯·巴貝奇（Charles Babbage）未能完成他的巴貝奇分析機，這個演算法未能在巴貝奇分析機上執行。
因為「well-defined procedure」缺少數學上精確的定義，19世紀和20世紀早期的數學家、邏輯學家在定義演算法上出現了困難。20世紀的英國數學家圖靈提出了著名的圖靈論題，並提出一種假想的電腦的抽象模型，這個模型被稱為圖靈機。圖靈機的出現解決了演算法定義的難題，圖靈的思想對演算法的發展起到了重要的作用。
以下是高德納在他的著作《電腦程式設計藝術》裡對演算法的特徵歸納：
演算法的核心是建立問題抽象的模型和明確求解目標，之後可以根據具體的問題選擇不同的模式和方法完成演算法的設計。
完全遍歷法和不完全遍歷法：在問題的解是有限離散解空間，且可以驗證正確性和最佳性時，最簡單的演算法就是把解空間的所有元素完全遍歷一遍，逐個檢測元素是否是我們要的解。這是最直接的演算法，實現往往最簡單。但是當解空間特別龐大時，這種演算法很可能導致工程上無法承受的計算量。這時候可以利用不完全遍歷方法——例如各種搜尋法和規劃法——來減少計算量。
分治法：把一個問題分割成互相獨立的多個部分分別求解的思路。這種求解思路帶來的好處之一是便於進行平行計算。
動態規劃法：當問題的整體最佳解就是由局部最佳解組成的時候，經常採用的一種方法。
貪婪演算法：常見的近似求解思路。當問題的整體最佳解不是（或無法證明是）由局部最佳解組成，且對解的最佳性沒有要求的時候，可以採用的一種方法。
線性規劃法：見條目。
簡併法：把一個問題通過邏輯或數學推理，簡化成與之等價或者近似的、相對簡單的模型，進而求解的方法。
遞迴方法與疊代方法
順序計算、平行計算和分散式計算：順序計算就是把形式化演算法用程式語言進行單執行緒序列化後執行。
確定性演算法和非確定性演算法
精確求解和近似求解
演算法是電腦處理資訊的本質，因為電腦程式本質上是一個演算法來告訴電腦確切的步驟來執行一個指定的任務，如計算職工的薪水或列印學生的成績單。一般地，當演算法在處理資訊時，會從輸入裝置或資料的儲存位址讀取資料，把結果寫入輸出裝置或某個儲存位址供以後再呼叫。
演算法的時間複雜度是指演算法需要消耗的時間資源。一般來說，電腦演算法是問題規模



n


{\displaystyle n}

的函式



f
(
n
)


{\displaystyle f(n)}

，演算法的時間複雜度也因此記做
演算法執行時間的增長率與



f
(
n
)


{\displaystyle f(n)}

的增長率正相關，稱作漸近時間複雜度（英語：Asymptotic computational complexity），簡稱時間複雜度。
常見的時間複雜度有：常數階



O
(
1
)


{\displaystyle O(1)}

，對數階



O
(
log
⁡
n
)


{\displaystyle O(\log n)}

，線性階



O
(
n
)


{\displaystyle O(n)}

，線性對數階



O
(
n
log
⁡
n
)


{\displaystyle O(n\log n)}

，平方階



O
(

n

2


)


{\displaystyle O(n^{2})}

，立方階



O
(

n

3


)


{\displaystyle O(n^{3})}

，...，



k


{\displaystyle k}

次方階



O
(

n

k


)


{\displaystyle O(n^{k})}

,指數階



O
(

2

n


)


{\displaystyle O(2^{n})}

。隨著問題規模



n


{\displaystyle n}

的不斷增大，上述時間複雜度不斷增大，演算法的執行效率越低。
演算法的空間複雜度是指演算法需要消耗的空間資源。其計算和表示方法與時間複雜度類似，一般都用複雜度的漸近性來表示。同時間複雜度相比，空間複雜度的分析要簡單得多。
演算法不單單可以用電腦程式來實現，也可以在人工神經網路、電路或者機械裝置上實現。
這是演算法的一個簡單的例子。
我們有一串隨機數列。我們的目的是找到這個數列中最大的數。如果將數列中的每一個數字看成是一顆豆子的大小，可以將下面的演算法形象地稱為「撿豆子」：
以上演算法在中國大陸的教科書中通常被叫做「打擂法」或者「迴圈打擂」[14][15][16]：在一個for迴圈中，每輪迴圈都有新的挑戰者。若挑戰者勝的話，挑戰者做新擂主，否則擂主衛冕。for迴圈結束後輸出最後的擂主。
下面是一個形式演算法，用ANSI C代碼表示
求兩個自然數的最大公約數
設兩個變數



M


{\displaystyle M}

和



N


{\displaystyle N}


用ANSI C代碼表示
利用if函式以及遞迴則能做出更為精簡的程式碼，更可省去交換的麻煩。（但是也因為遞迴呼叫，其空間複雜度提高）
資料（英語：data），是指未經過處理的原始記錄。一般而言，資料缺乏組織及分類，無法明確的表達事物代表的意義，它可能是一堆雜誌、一疊報紙、數種開會記錄或是整本病人的病歷紀錄。資料描述事物的符號記錄，是可定義為意義的實體，涉及事物的存在形式。是關於事件之一組離散且客觀的事實描述，是構成訊息和知識的原始材料。
規律，又叫法則，馬克思主義對此範疇的定義及定性如下：規律是事物、現象和過程內在的、本質的必然的聯繫，具有客觀性和普遍性，不依人的意志為轉移，人們不能創造改變和消滅規律，只能認識它，利用它來改造自然界，改造人類社會，並且限制某些規律對人類的破壞作用，是人們進行科學預測，制定實踐計劃的客觀依據。
規律是在某種範圍內或某種條件下，事物間的必然本質聯繫，具有客觀性，普遍性，相對性和唯一性。
推斷統計學（或稱統計推論，英語：statistical inference），指統計學中，研究如何根據樣本數據去推斷總體數量特徵的方法。它是在對樣本數據進行描述的基礎上，對統計總體的未知數量特徵做出以概率形式表述的推斷。更概括地說，是在一段有限的時間內，通過對一個隨機過程的觀察來進行推斷的。
統計學中，統計推論與描述統計相對應。
統計推論的結果常用來決定下一步的作法，可能是要做更深入的試驗或問卷，或是是決定是否要實行某項方案。
在數學上，推論（也稱為系、系理）指能夠「簡單明了地」從前述命題推出的論斷，推論往往在定理後出現。如果命題B能夠被簡單明了的從命題A推導出，則稱B為A的推論。
推論、定理、命題等術語的使用區別往往是比較主觀的，因為「簡單明了」的定義本來就與作者及上下文相關。當然，推論一般被認為不如定理重要。
資料探勘（英語：data mining）是一個跨學科的電腦科學分支[1][2][3] 。它是用人工智慧、機器學習、統計學和資料庫的交叉方法在相對較大型的資料集（英語：data set）中發現模式的計算過程[1]。
資料探勘過程的總體目標是從一個資料集中提取資訊，並將其轉換成可理解的結構，以進一步使用[1]。除了原始分析步驟，它還涉及到資料庫和資料管理方面、資料預處理（英語：data pre-processing）、模型與推斷方面考量、興趣度度量、複雜度的考慮，以及發現結構、視覺化及線上更新等後處理[1]。資料探勘是「資料庫知識發現」（Knowledge-Discovery in Databases,KDD）的分析步驟[4] ，本質上屬於機器學習的範疇。
類似詞語「資料挖掘（英語：data dredging）」、「資料捕魚」和「資料探測」指用資料探勘方法來採樣（可能）過小以致無法可靠地統計推斷出所發現任何模式的有效性的更大總體資料集的部分。不過這些方法可以建立新的假設來檢驗更巨量資料總體。
資料挖掘是因為海量有用資料快速增長的產物。使用計算機進行歷史資料分析，1960年代數字方式採集資料已經實現。1980年代，關聯式資料庫隨著能夠適應動態按需分析資料的結構化查詢語言發展起來。資料倉儲開始用來儲存大量的資料。
因為面臨處理資料庫中大量資料的挑戰，於是資料挖掘應運而生，對於這些問題，它的主要方法是資料統計分析和人工智慧搜尋技術。
資料挖掘有以下這些不同的定義：
儘管通常資料挖掘應用於資料分析，但是像人工智慧一樣，它也是一個具有豐富含義的詞彙，可用於不同的領域。
它與KDD的關係是：KDD是從資料中辨別有效的、新穎的、潛在有用的、最終可理解的模式的過程；而資料探勘是KDD通過特定的演算法在可接受的計算效率限制內生成特定模式的一個步驟。
事實上，在現今的文獻中，這兩個術語經常不加區分的使用。
資料探勘本質上屬於機器學習的內容。
例如《資料探勘：實用機器學習技術及Java實現》一書[7]大部分是機器學習的內容。這本書最初只叫做「實用機器學習」，「資料探勘」一詞是後來為了行銷才加入的[8]。通常情況下，使用更為正式的術語，（大規模）資料分析和分析學，或者指出實際的研究方法（例如人工智慧和機器學習）會更準確一些。
資料探勘的實際工作是對大規模資料進行自動或半自動的分析，以提取過去未知的有價值的潛在資訊，例如資料的分組（通過聚類分析）、資料的異常記錄（通過異常檢測）和資料之間的關係（通過關聯式規則挖掘）。這通常涉及到資料庫技術，例如空間索引（英語：spatial index）。這些潛在資訊可通過對輸入資料處理之後的總結來呈現，之後可以用於進一步分析，比如機器學習和預測分析。舉個例子，進行資料探勘操作時可能要把資料分成多組，然後可以使用決策支援系統以獲得更加精確的預測結果。不過資料收集、資料預處理、結果解釋和撰寫報告都不算資料探勘的步驟，但是它們確實屬於「資料庫知識發現」（KDD）過程，只不過是一些額外的環節。
資料庫知識發現（KDD）過程通常定義為以下階段：
在運用資料探勘演算法之前，必須收集目標資料集。由於資料探勘只能發現實際存在於資料中的模式，目標資料集必須大到足以包含這些模式，而其餘的足夠簡潔以在一個可接受的時間範圍內挖掘。常見的資料來源如資料超市或資料倉儲。在資料探勘之前，有必要預處理來分析多變數資料。然後要清理目標集。資料清理移除包含噪聲和含有缺失資料的觀測量。
資料探勘涉及六類常見的任務： [4]
資料探勘的價值一般帶著一定的目的，而這目的是否得到實現一般可以通過結果驗證來實現。驗證是指「通過提供客觀證據對規定要求已得到滿足的認定」，而這個「認定」活動的策劃、實施和完成，與「規定要求」的內容緊密相關。資料探勘過程中的資料驗證的「規定要求」的設定，往往與資料探勘要達到的基本目標、過程目標和最終目標有關。驗證的結果可能是「規定要求」得到完全滿足，或者完全沒有得到滿足，以及其他介於兩者之間的滿足程度的狀況。驗證可以由資料探勘的人自己完成，也可以通過其他人參與或完全通過他人的專案，以與資料探勘者毫無關聯的方式進行驗證。一般驗證過程中，資料探勘者是不可能不參與的，但對於認定過程中的客觀證據的收集、認定的評估等過程如果通過與驗證提出者無關的人來實現，往往更具有客觀性。通過結果驗證，資料探勘者可以得到對自己所挖掘的資料價值高低的評估。
與資料挖掘有關的，還牽扯到隱私問題，例如：一個僱主可以透過存取醫療記錄來篩選出那些有糖尿病或者嚴重心臟病的人，從而意圖削減保險支出。然而，這種做法會導致倫理和法律問題。
對於政府和商業資料的挖掘，可能會涉及到的，是國家安全或者商業機密之類的問題。這對於保密也是個不小的挑戰。[10]
資料挖掘有很多合法的用途，例如可以在患者群的資料庫中查出某藥物和其副作用的關聯。這種關聯可能在1000人中也不會出現一例，但藥物學相關的項目就可以運用此方法減少對藥物有不良反應的病人數量，還有可能挽救生命；但這當中還是存在著資料庫可能被濫用的問題。
資料挖掘實現了用其他方法不可能實現的方法來發現資訊，但它必須受到規範，應當在適當的說明下使用。
如果資料是收集自特定的個人，那麼就會出現一些涉及保密、法律和倫理的問題。[11]
2018年5月25日，歐盟一般資料保護規範(General Data Protection Regulation，GDPR)正式上路，保障個人資料蒐集的同意權與刪除要求，在進入網站時會進行個人資料蒐集、處理及利用之告知，並在當事人同意之下做蒐集。[12]
資料探勘的方法包括監督式學習、非監督式學習、半監督學習、增強學習。監督式學習包括：分類、估計、預測。非監督式學習包括：聚類，關聯規則分析。
資料探勘在零售行業中的應用：零售公司跟蹤客戶的購買情況，發現某個客戶購買了大量的真絲襯衣，這時資料挖掘系統就在此客戶和真絲襯衣之間建立關聯。銷售部門就會看到此資訊，直接發送真絲襯衣的當前行情，以及所有關於真絲襯衫的資料發給該客戶。這樣零售商店通過資料挖掘系統就發現了以前未知的關於客戶的新資訊，並且擴大經營範圍。
通常作為與資料倉庫和分析相關的技術，資料挖掘處於它們的中間。然而，有時還會出現十分可笑的應用，例如發掘出不存在但看起來振奮人心的模式（特別的因果關係），這些根本不相關的、甚至引人誤入歧途的、或是毫無價值的關聯，在統計學文獻裡通常被戲稱為「資料挖泥」（Data dredging, data fishing, or data snooping）。
資料挖掘意味著掃瞄可能存在任何關係的資料，然後篩選出符合的模式，（這也叫作「過度匹配模式」）。大量的資料集中總會有碰巧或特定的資料，有著「令人振奮的關係」。因此，一些結論看上去十分令人懷疑。儘管如此，一些探索性資料分析 還是需要應用統計分析尋找資料，所以好的統計方法和資料資料的界限並不是很清晰。
更危險是出現根本不存在的關聯性。投資分析家似乎最容易犯這種錯誤。在一本叫做《顧客的遊艇在哪裡？》的書中寫道：「總是有相當數量的可憐人，忙於從上千次的賭輪盤的輪子上尋找可能的重複模式。十分不幸的是，他們通常會找到。」[13]
多數的資料挖掘研究都關注於發現大量的資料集中，一個高度詳細的模式。在《大忙人的資料挖掘》一書中， 西弗吉尼亞大學和不列顛哥倫比亞大學研究者討論了一個交替模式，用來發現一個資料集當中兩個元素的最小區別，它的目標是發現一個更簡單的模式來描述相關資料。[14]
資料探勘是關於分析資料的；有關從資料中提取資訊的資訊，參見：
電腦視覺（Computer vision）是一門研究如何使機器「看」的科學，更進一步的說，就是指用攝影機和電腦代替人眼對目標進行辨識、跟蹤和測量等機器視覺，並進一步做圖像處理，用電腦處理成為更適合人眼觀察或傳送給儀器檢測的圖像[1]。
作為一門科學學科，電腦視覺研究相關的理論和技術，試圖建立能夠從圖像或者多維資料中取得「資訊」的人工智慧系統。這裡所指的資訊指香農定義的，可以用來幫助做一個「決定」的資訊。因為感知可以看作是從感官訊號中提取資訊，所以電腦視覺也可以看作是研究如何使人工系統從圖像或多維資料中「感知」的科學。
作為一個工程學科，電腦視覺尋求基於相關理論與模型來建立電腦視覺系統。這類系統的組成部分包括：
電腦視覺同樣可以被看作是生物視覺的一個補充。在生物視覺領域中，人類和各種動物的視覺都得到了研究，從而建立了這些視覺系統感知資訊過程中所使用的物理模型。另一方面，在電腦視覺中，靠軟體和硬體實現的人工智慧系統得到了研究與描述。生物視覺與電腦視覺進行的學科間交流為彼此都帶來了巨大價值。
電腦視覺包含如下一些分支：畫面重建，事件監測，目標跟蹤，目標辨識，機器學習，索引建立，圖像恢復等。
電腦視覺領域的突出特點是其多樣性與不完善性。
這一領域的先驅可追溯到更早的時候，但是直到20世紀70年代後期，當電腦的效能提高到足以處理諸如圖像這樣的大規模資料時，電腦視覺才得到了正式的關注和發展。然而這些發展往往起源於其他不同領域的需要，因而何謂「電腦視覺問題」始終沒有得到正式定義，很自然地，「電腦視覺問題」應當被如何解決也沒有成型的公式。
儘管如此，人們已開始掌握部分解決具體電腦視覺任務的方法，可惜這些方法通常都僅適用於一群狹隘的目標（如：臉孔、指紋、文字等），因而無法被廣泛地應用於不同場合。
對這些方法的應用通常作為某些解決複雜問題的大規模系統的一個組成部分（例如醫學圖像的處理，工業製造中的品質控制與測量）。在電腦視覺的大多數實際應用當中，電腦被預設為解決特定的任務，然而基於機器學習的方法正日漸普及，一旦機器學習的研究進一步發展，未來「泛用型」的電腦視覺應用或許可以成真。
人工智慧所研究的一個主要問題是：如何讓系統具備「計劃」和「決策能力」？從而使之完成特定的技術動作（例如：移動一個機器人通過某種特定環境）。這一問題便與電腦視覺問題息息相關。在這裡，電腦視覺系統作為一個感知器，為決策提供資訊。另外一些研究方向包括圖型識別和機器學習（這也隸屬於人工智慧領域，但與電腦視覺有著重要聯絡），也由此，電腦視覺時常被看作人工智慧與電腦科學的一個分支。
物理是與電腦視覺有著重要聯絡的另一領域。
電腦視覺關注的目標在於充分理解電磁波——主要是可見光與紅外線部分——遇到物體表面被反射所形成的圖像，而這一過程便是基於光學物理和固態物理，一些尖端的圖像感測器甚至會應用到量子力學理論，來解析影像所表示的真實世界。同時，物理學中的很多測量難題也可以通過電腦視覺得到解決，例如流體運動。也由此，電腦視覺同樣可以被看作是物理學的拓展。
另一個具有重要意義的領域是神經生物學，尤其是其中生物視覺系統的部分。
在整個20世紀中，人類對各種動物的眼睛、神經元、以及與視覺刺激相關的腦部組織都進行了廣泛研究，這些研究得出了一些有關「天然的」視覺系統如何運作的描述（儘管仍略嫌粗略），這也形成了電腦視覺中的一個子領域——人們試圖建立人工系統，使之在不同的複雜程度上類比生物的視覺運作。同時電腦視覺領域中，一些基於機器學習的方法也有參考部分生物機制。
電腦視覺的另一個相關領域是訊號處理。很多有關單元變數訊號的處理方法，尤其對是時變訊號的處理，都可以很自然的被擴充為電腦視覺中對二元變數訊號或者多元變數訊號的處理方法。但由於圖像資料的特有屬性，很多電腦視覺中發展起來的方法，在單元訊號的處理方法中卻找不到對應版本。這類別方法的一個主要特徵，便是他們的非線性以及圖像資訊的多維性，以上二點作為電腦視覺的一部分，在訊號處理學中形成了一個特殊的研究方向。
除了上面提到的領域，很多研究課題同樣可被當作純粹的數學問題。例如，電腦視覺中的很多問題，其理論基礎便是統計學，最佳化理論以及幾何學。
如何使既有方法通過各種軟硬體實現，或說如何對這些方法加以修改，而使之獲得合理的執行速度而又不損失足夠精度，是現今電腦視覺領域的主要課題。
電腦視覺，圖像處理，圖像分析，機器人視覺和機器視覺是彼此緊密關聯的學科。如果你翻開帶有上面這些名字的教材，你會發現在技術和應用領域上他們都有著相當大部分的重疊。這表明這些學科的基礎理論大致是相同的，甚至讓人懷疑他們是同一學科被冠以不同的名稱。
然而，各研究機構，學術期刊，會議及公司往往把自己特別的歸為其中某一個領域，於是各種各樣的用來區分這些學科的特徵便被提了出來。下面將給出一種區分方法，儘管並不能說這一區分方法完全準確。
電腦視覺的研究物件主要是對映到單幅或多幅圖像上的三維場景，例如三維場景的重建。電腦視覺的研究很大程度上針對圖像的內容。
圖像處理與圖像分析的研究物件主要是二維圖像，實現圖像的轉化，尤其針對像素級的操作，例如提高圖像對比度，邊緣提取，去雜訊和幾何變換如圖像旋轉。這一特徵表明無論是圖像處理還是圖像分析其研究內容都和圖像的具體內容無關。
機器視覺主要是指工業領域的視覺研究，例如自主機器人的視覺，用於檢測和測量的視覺。這表明在這一領域通過軟體硬體，圖像感知與控制理論往往與圖像處理得到緊密結合來實現高效的機器人控制或各種即時操作。
圖型識別使用各種方法從訊號中提取資訊，主要運用統計學的理論。此領域的一個主要方向便是從圖像資料中提取資訊。
還有一個領域被稱為成像技術。這一領域最初的研究內容主要是製作圖像，但有時也涉及到圖像分析和處理。例如，醫學成像就包含大量的醫學領域的圖像分析。
對於所有這些領域，一個可能的過程是你在電腦視覺的實驗室工作，工作中從事著圖象處理，最終解決了機器視覺領域的問題，然後把自己的成果發表在了圖型識別的會議上。
幾乎在每個電腦視覺技術的具體應用都要解決一系列相同的問題。這些經典的問題包括：
一個電腦視覺，圖像處理和機器視覺所共有的經典問題便是判定一組圖像資料中是否包含某個特定的物體，圖像特徵或運動狀態。這一問題通常可以通過機器自動解決，但是到目前為止，還沒有某個單一的方法能夠廣泛的對各種情況進行判定：在任意環境中辨識任意物體。現有技術能夠也只能夠很好地解決特定目標的辨識，比如簡單幾何圖形辨識，臉部辨識，印刷或手寫檔案辨識或者車輛辨識。而且這些辨識需要在特定的環境中，具有指定的光照，背景和目標姿態要求。
廣義的辨識在不同的場合又演化成了幾個略有差異的概念：
辨識的幾個具體應用方向：
基於序列圖像的對物體運動的監測包含多種類型，諸如：
給定一個場景的二或多幅圖像或者一段錄影，場景重建尋求為該場景建立一個三維模型。最簡單的情況便是生成一組三維空間中的點。更複雜的情況下會建立起完整的三維表面模型。
圖像恢復的目標在於移除圖像中的雜訊，例如儀器雜訊，模糊等
電腦視覺系統的結構形式很大程度上依賴於其具體應用方向。有些是獨立工作的，用於解決具體的測量或檢測問題；也有些作為某個大型複雜系統的組成部分出現，比如和機械控制系統，資料庫系統，人機介面裝置協同工作。電腦視覺系統的具體實現方法同時也由其功能決定——是預先固定的抑或是在執行過程中自動學習調整。儘管如此，有些功能卻幾乎是每個電腦系統都需要具備的：
自然語言處理（英語：Natural Language Processing，縮寫作 NLP）是人工智慧和語言學領域的分支學科。此領域探討如何處理及運用自然語言；自然語言處理包括多方面和步驟，基本有認知、理解、生成等部分。
自然語言認知和理解是讓電腦把輸入的語言變成有意思的符號和關係，然後根據目的再處理。自然語言生成系統則是把計算機資料轉化為自然語言。
自然語言處理大體是從1950年代開始，雖然更早期也有作為。1950年，圖靈發表論文「計算機器與智慧型（英語：Computing Machinery and Intelligence）」，提出現在所謂的「圖靈測試」作為判斷智慧型的條件。
1954年的喬治城實驗（英語：Georgetown-IBM experiment）涉及全部自動翻譯（英語：automatic translation）超過60句俄文成為英文。研究人員聲稱三到五年之內即可解決機器翻譯的問題。[1]不過實際進展遠低於預期，1966年的ALPAC報告（英語：ALPAC report）發現十年研究未達預期目標，機器翻譯的研究經費遭到大幅削減。一直到1980年代末期，統計機器翻譯系統發展出來，機器翻譯的研究才得以更上一層樓。
1960年代發展特別成功的NLP系統包括SHRDLU（英語：SHRDLU）——一個詞彙設限、運作於受限如「積木世界」的一種自然語言系統，以及1964-1966年約瑟夫·維森鮑姆類比「個人中心治療」而設計的ELIZA（英語：ELIZA）——幾乎未運用人類思想和感情的訊息，有時候卻能呈現令人訝異地類似人之間的互動。「病人」提出的問題超出ELIZA 極小的知識範圍之時，可能會得到空泛的回答。例如問題是「我的頭痛」，回答是「為什麼說你頭痛？」
1970年代，程式設計師開始設計「概念本體論」（conceptual ontologies）的程式，將現實世界的資訊，架構成電腦能夠理解的資料。實例有MARGIE、SAM、PAM、TaleSpin、QUALM、Politics以及Plot Unit。許多聊天機器人在這一時期寫成，包括PARRY（英語：PARRY） 、Racter（英語：Racter） 以及Jabberwacky（英語：Jabberwacky） 。
一直到1980年代，多數自然語言處理系統是以一套複雜、人工訂定的規則為基礎。不過從1980年代末期開始，語言處理引進了機器學習的演算法，NLP產生革新。成因有兩個：運算能力穩定增加（參見摩爾定律）；以及喬姆斯基 語言學理論漸漸喪失主導（例如轉換-生成文法）。該理論的架構不傾向於語料庫——機器學習處理語言所用方法的基礎。有些最早期使用的機器學習演算法，例如決策樹，是硬性的、「如果-則」規則組成的系統，類似當時既有的人工訂定的規則。不過詞性標記（英語：part-of-speech tagging）將隱馬爾可夫模型引入NLP，並且研究日益聚焦於軟性的、以機率做決定的統計模型，基礎是將輸入資料裡每一個特性賦予代表其份量的數值。許多語音識別現今依賴的快取語言模型（英語：cache language model）即是一種統計模型的例子。這種模型通常足以處理非預期的輸入資料，尤其是輸入有錯誤（真實世界的資料總免不了），並且在整合到包含多個子任務的較大系統時，結果比較可靠。
許多早期的成功屬於機器翻譯領域，尤其歸功IBM的研究，漸次發展出更複雜的統計模型。這些系統得以利用加拿大和歐盟現有的語料庫，因為其法律規定政府的會議必須翻譯成所有的官方語言。不過，其他大部分系統必須特別打造自己的語料庫，一直到現在這都是限制其成功的一個主要因素，於是大量的研究致力於從有限的資料更有效地學習。
近來的研究更加聚焦於非監督式學習和半監督學習（英語：semi-supervised learning）的演算法。這種演算法，能夠從沒有人工註解理想答案的資料裡學習。大體而言，這種學習比監督學習困難，並且在同量的資料下，通常產生的結果較不準確。不過沒有註解的資料量極巨（包含了全球資訊網），彌補了較不準確的缺點。
近年來, 深度學習技巧紛紛出爐[2][3] 在自然語言處理方面獲得最尖端的成果，例如語言模型[4]、語法分析[5][6]等等。
理論上，NLP是一種很吸引人的人機互動方式。早期的語言處理系統如SHRDLU，當它們處於一個有限的「積木世界」，運用有限的詞彙表對談時，工作得相當好。這使得研究員們對此系統相當樂觀，然而，當把這個系統拓展到充滿了現實世界的含糊與不確定性的環境中時，他們很快喪失了信心。
由於理解（understanding）自然語言，需要關於外在世界的廣泛知識以及運用操作這些知識的能力，自然語言認知，同時也被視為一個人工智慧完備（AI-complete）的問題。同時，在自然語言處理中，"理解"的定義也變成一個主要的問題。
一些NLP面臨的問題實例：
不少的中文相關笑話即是利用類似結構的中文造句而成，此類笑話通常帶有《中文博大精深》之類的詞彙,敘述多以老外參加考試為背景。例子如下：『
某老外苦學漢語10年，到東方參加漢語考試。試題為「請解釋下列句子」：
阿呆給長官送紅包時，兩個人的對話頗有意思。
長官：「你這是什麼意思？」
阿呆：「沒什麼意思，意思意思。」
長官：「你這就不夠意思了。」
阿呆：「小意思，小意思。」
長官：「你這人真有意思。」
阿呆：「其實也沒有別的意思。」
長官：「那我就不好意思了。」
阿呆：「是我不好意思。」
老外淚流滿面，交白卷回國了。
』
第一，傳統的基於句法-語意規則的理性主義方法過於複雜，隨著語料庫建設和語料庫語言學的崛起，大規模真實文字的機器學習處理成為自然語言處理的主要選擇。
第二，統計數學方法越來越受到重視，自然語言處理中越來越多地使用機器自動學習的方法來取得語言知識。
第三，淺層處理與深層處理並重，統計與規則方法並重，形成混合式的系統。
第四，自然語言處理中越來越重視詞彙的作用，出現了強烈的「詞彙主義」的傾向。詞彙知識庫的建造成為了普遍關注的問題。[7]
統計自然語言處理運用了推測學、機率、統計的方法來解決上述，尤其是針對容易高度模糊的長串句子，當套用實際文法進行分析產生出成千上萬筆可能性時所引發之難題。處理這些高度模糊句子所採用消歧的方法通常運用到語料庫以及馬可夫模型（Markov models）。統計自然語言處理的技術主要由同樣自人工智慧下與學習行為相關的子領域：機器學習及資料採掘所演進而成。
生物辨識技術（biometrics，也稱生物測定學），是指用數理統計方法對生物進行分析，現在多指對生物體（一般特指人）本身的生物特徵來區分生物體個體的電腦技術。研究領域主要包括語音、臉、指紋、掌紋（英語：掌纹）、虹膜、視網膜、體形、個人習慣（例如敲擊鍵盤的力度和頻率、簽字）等，相應的辨識技術就有說話人辨識、臉部辨識、指紋辨識、掌紋辨識、虹膜辨識、視網膜辨識、體形辨識、鍵盤敲擊辨識、簽字辨識等。
美國某旅遊景點使用了「指紋門票」技術
搜尋引擎（英語：search engine）是一種資訊檢索系統，旨在協助搜尋儲存在電腦系統中的資訊。搜尋結果一般被稱為「hits」，通常會以表單的形式列出。網路搜尋引擎是最常見、公開的一種搜尋引擎，其功能為搜尋全球資訊網上儲存的資訊。
搜尋引擎為一組專案提供了一個介面，使用戶能夠指定關於感興趣的專案的標準，並讓引擎找到匹配的專案，這些標準稱為搜尋查詢。在文字搜尋引擎的情況下，搜尋查詢通常表示為辨識一個或多個文件可能包含的期望概念的一組單詞。[1]有多種樣式的搜尋查詢語法在嚴格性上有差異。它也可以在以前的站點中搜尋搜尋引擎中的名稱。而一些文字搜尋引擎要求用戶輸入由白色空格分隔的兩個或三個字，其他搜尋引擎可以使用戶能夠指定整個文件，圖片，聲音和各種形式的自然語言。一些搜尋引擎對搜尋查詢進行改進，以增加通過稱為查詢擴充的過程提供品質集合的可能性。查詢理解方法可用於標準化查詢語言。
基於索引的搜尋引擎符合查詢指定條件的專案列表通常會排序或排名。按相關性排列專案（從最高到最低）減少尋找所需資訊所需的時間。概率搜尋引擎根據相似性度量（每個專案和查詢之間，通常以1到0,1的比例最相似）和有時受歡迎程度或權限或使用相關性回饋來評估專案。布林搜尋引擎通常只返回匹配的專案，而不考慮訂單，為了提供根據一些標準快速排序的一組匹配專案，搜尋引擎通常將通過稱為索引的過程來收集關於所考慮的一組專案的元資料。索引通常需要較少量的電腦儲存，這就是為什麼一些搜尋引擎僅儲存索引的資訊而不是每個專案的完整內容，而是提供導航到搜尋引擎結果頁面中的專案的方法。或者，搜尋引擎可以將每個專案的副本儲存在高速緩衝記憶體中，使得用戶可以在索引時或為了歸檔目的看到該專案的狀態，或者使得重複的行程更有效和更快地工作。其他類型的搜尋引擎不儲存索引。抓取器或蜘蛛型搜尋引擎（也稱為即時搜尋引擎）可以在搜尋查詢時收集和評估專案，基於起始專案的內容（稱為種子或種子URL）動態考慮附加專案網際網路爬蟲的情況）。元搜尋引擎既不儲存索引也不儲存快取，而只是重新使用一個或多個其他搜尋引擎的索引或結果來提供聚合的最終結果集。
診斷，在醫學意義上指對人體生理或精神疾病及其病理原因所作的判斷。作出這種判斷一般需要的的資料有：醫生等專業人員根據症狀、病史（包括家庭病史）、病歷及醫療檢查結果等。其概念，已經被推廣用於生活與社會中各種問題及其原因的判斷，例如對電腦或汽車故障的診斷。
在臨床診斷中，需要以檢查數據和病患病情綜合指標兩方面來做出病情判斷，以及利用各種方法如：病患病史、以往臨床醫生的醫囑、病患形體上的直觀觀察以及各種必要之醫療檢查。醫療診斷是從病患之發病徵兆，發病跡象以及經過各種必要之醫療檢查所得出之結論，來確定一位病患所患之症的過程。一般認為，一種病情不會只有單一病症跡象反映，也就是說一種病症跡象不會只發生在一種病情中。各種病性之徵兆很可能會表現在各種不同的病情之中。從病患所表現出的各種症狀里，我們可以根據某些疾病的相互排斥以及各種疾病的各種病症的出現頻率，運用貝氏定理來幫助診斷。根據每種疾病在每個病人身上出現的各種症狀或各種綜合症可能會得出不同的診斷，也可理解為同一種症狀會出現在不同病人所患的不同的疾病中。
症狀（英語：symptom）：根據病患主觀所表現出的各種不適，確立的一種便於快速有效理解的醫學術語；例如：病患表述其有種缺少空氣的感覺或感覺不舒服，呼吸困難，醫者會稱之為氣促、焦慮、氣喘、虛脫等。
徵兆（英語：sign）：當醫者在觀察病患所發現的客觀因素；如每分鐘超過30下的呼吸急促。針對各種疾病的病症、對疾病的診斷和根據徵兆對疾病的預測來講，症狀學和臨床症狀學是醫學很重要的一部分。
體檢：醫者通過一系列的必要手段對患者進行檢查，主要由觀診、觸診、叩診、聞診、聽診（類似中醫里望、聞、問、切）組成，以次來獲取最重要的臨床病症。
所有記錄在患者病例中所涉及的各種病情徵兆以及在體檢中所得到的客觀病症。
通常，由各種症狀及徵兆所確認的綜合症可能是由各種疾病所引起。醫者必須有理由的假設由某一病症所造成的可能後果，並通過一切有必要之診斷工具來證明或否定此一假設。
醫學徵象症狀症候群
診斷鑑別診斷預後
急性慢性病治癒/緩解（英語：Cure#Remission）
疾病以人名為名稱的疾病（英語：List of eponymously named diseases）首字母縮寫或簡稱（英語：List of medical abbreviations）
病程
證券市場是指股票、債券、投資基金和其它有價證券發行和交易的場所[1]，它由股票市場、債券市場、基金市場和其它金融衍生品市場組成。
一級市場又被稱為初級市場、發行市場，是企業籌措新資金的市場。通常此市場無固定的發行時間與地點，屬於無形的市場，依發行目的不同，其發行方式也有所不同。
二級市場也被稱為次級市場、流通市場、交易市場，是已發行的證券通過買賣交易實現流通轉讓的市場。
股票市場是股票發行和交易的場所。
債券市場是債券發行、買賣、交易的場所。
基金市場是基金份額發行和流通的市場。
金融衍生品市場是金融衍生品發行和交易的市場。
核酸序列（英語：Nucleic acid sequence，亦稱為核酸的一級結構）使用一串字母表示的真實的或者假設的攜帶基因信息的DNA分子的一級結構。每個字母代表一種核鹼基，兩個鹼基形成一個鹼基對，鹼基對的配對規律是固定的，A=T,C≡G。三個相鄰的鹼基對形成一個密碼子。一種密碼子對應一種胺基酸，不同的胺基酸合成不同的蛋白質。在DNA的複製及蛋白質的合成過程中，鹼基配對規律是十分關鍵的。
可能的字母只有A, C, G和T，分別代表組成DNA的四種核苷酸－腺嘌呤，胞嘧啶，鳥嘌呤，胸腺嘧啶。典型的他們無間隔的排列在一起，例如序列AAAGTCTGAC。任意長度大於4的一串核苷酸被稱作一個序列。 關於它的生物功能，則依賴於上下文的序列，一個序列可能被正讀，反讀；包含編碼或者無編碼。DNA序列也可能包含非編碼DNA。
核酸也具有二級結構和三級結構 。 一級結構有時被錯誤地稱為一級序列。 相反，沒有並行的二級或三級序列概念。
核酸由稱為核苷酸的連接單位的長鏈組成。 每個核苷酸由三個亞基組成：磷酸基團和糖（在RNA的情況下是核糖，而在DNA中的脫氧核糖）構成核酸鏈的骨架，並且與糖連接是一組核鹼基之一。 核鹼基在鏈的鹼基對中是重要的，以形成更高級的二級結構和三級結構，例如著名的雙螺旋。
可能的字母是A，C，G和T，代表DNA鏈的四個核苷酸鹼基 - 腺嘌呤，胞嘧啶，鳥嘌呤，胸腺嘧啶 - 與磷酸二酯骨架共價連接。 在典型情況下，序列無間隙地相互鄰接被印刷，如AAAGTCTGAC序列中從5'到3'方向從左到右讀。 關於轉錄，如果序列與轉錄的RNA具有相同的順序，則序列位於編碼鏈上。
一個序列可以與另一個序列互補性(分子生物學)（英語：Complementarity (molecular biology)），這意味著它們在互補的每個位置上具有鹼基（即A至T，C至G）並且以相反的順序。 例如，TTAC的互補序列是GTAA。 如果雙鏈DNA的一條鏈被認為是有義鏈（sense strand），那麼被認為是反義鏈的另一條鏈將具有與有義鏈的互補序列。
比較和確定兩個核苷酸序列之間的％差異。
雖然A，T，C和G代表某個位置的特定核苷酸，但也有代表模糊性的字母，當在該位置可能出現一種以上的核苷酸時使用這些字母。 國際純粹與應用化學聯合會（IUPAC）的規則如下[1]：
這些符號對RNA也有效，除了用U（尿嘧啶）代替T（胸腺嘧啶）[1]。
除了腺嘌呤（A），胞嘧啶（C），鳥嘌呤（G），胸腺嘧啶（T）和尿嘧啶（U）之外，DNA和RNA還含有在核酸鏈形成後已被修飾的鹼基。 在DNA中，最常見的修飾鹼是5-甲基胞苷（英語：5-Methylcytidine）（m5C）。 在RNA中，有許多修飾的鹼基，包括假尿苷（Ψ），二氫尿苷（D），肌苷（I），核糖胸苷（rT）和7-甲基鳥苷（m7G）[3][4]。 次黃嘌呤和黃嘌呤是通過誘變劑存在產生的許多鹼中的兩種，它們都通過脫氨作用（用羰基取代胺基）。 次黃嘌呤是由腺嘌呤產生的，而黃嘌呤是由鳥嘌呤產生的[5] 。 類似地，胞嘧啶的脫氨基作用導致尿嘧啶。
在生物系統中，核酸含有活細胞用於構建特定蛋白質的信息。 核酸鏈上的核鹼基序列通過細胞機器翻譯成構成蛋白質鏈的胺基酸序列。 被稱為一個密碼子(codon)的每組三個鹼基對應於單個胺基酸，並且存在特定的遺傳密碼，通過該遺傳密碼，三個鹼基的每種可能組合對應於特定胺基酸。
分子生物學的中心法則概述了使用核酸中包含的信息構建蛋白質的機制。 DNA被轉錄成mRNA分子，其進入核糖體，其中mRNA用作構建蛋白質鏈的模板。 由於核酸可以與具有互補序列的分子結合，因此在編碼蛋白質的「有義」序列和本身無功能但可以與有義鏈結合的互補「反義」序列之間存在區別。
語音辨識（speech recognition）技術，也被稱為自動語音辨識（英語：Automatic Speech Recognition, ASR）、電腦語音識別（英語：Computer Speech Recognition）或是語音轉文字識別（英語：Speech To Text, STT），其目標是以電腦自動將人類的語音內容轉換為相應的文字。與說話人辨識（英語：Speaker recognition）及說話人確認不同，後者嘗試辨識或確認發出語音的說話人而非其中所包含的詞彙內容。
語音辨識技術的應用包括語音撥號、語音導航、室內裝置控制、語音文件檢索、簡單的聽寫資料錄入等。語音辨識技術與其他自然語言處理技術如機器翻譯及語音合成技術相結合，可以構建出更加複雜的應用，例如語音到語音的翻譯。[1]
語音辨識技術所涉及的領域包括：訊號處理、圖型識別、概率論和資訊理論、發聲機理和聽覺機理、人工智慧等等。
早在電腦發明之前，自動語音辨識的設想就已經被提上了議事日程，早期的聲碼器可被視作語音辨識及合成的雛形。而1920年代生產的"Radio Rex"玩具狗是最早的語音辨識器，當這隻狗的名字被呼喚的時候，它能夠從底座上彈出來[2]。最早的基於電腦的語音辨識系統是由AT&T貝爾實驗室開發的Audrey語音辨識系統，它能夠辨識10個英文數位。其辨識方法是跟蹤語音中的共振峰。該系統得到了98%的正確率。[3]。到1950年代末，倫敦學院(Colledge of London)的Denes已經將語法概率加入語音辨識中。
1960年代，人工神經網路被引入了語音辨識。這一時代的兩大突破是線性預測編碼Linear Predictive Coding (LPC)， 及動態時間規整Dynamic Time Warp技術。
語音辨識技術的最重大突破是隱含馬爾科夫模型Hidden Markov Model的應用。從Baum提出相關數學推理，經過Rabiner等人的研究，卡內基梅隆大學的李開復最終實現了第一個基於隱馬爾科夫模型的大詞彙量語音辨識系統Sphinx[4]。此後嚴格來說語音辨識技術並沒有脫離HMM框架。
儘管多年來研究人員一直嘗試將「聽寫機」推廣，語音辨識技術在目前還無法支援無限領域，無限說話人的聽寫機應用。
目前，主流的大詞彙量語音辨識系統多採用統計圖型識別技術。典型的基於統計圖型識別方法的語音辨識系統由以下幾個基本模組所構成：
從數學角度可以更加清楚的了解上述模組之間的關係。首先，統計語音辨識的最基本問題是，給定輸入訊號或特徵序列



O
=
{

O

1


,

O

2


,
⋯

O

n


}


{\displaystyle O=\{O_{1},O_{2},\cdots O_{n}\}}

，符號集（詞典）





W


=
{

W

1


,

W

2


,
⋯
,

W

n


}


{\displaystyle {\mathcal {W}}=\{W_{1},W_{2},\cdots ,W_{n}\}}

，求解符號串



W
=

W

1


,

W

2


,
⋯
,

W

k




{\displaystyle W=W_{1},W_{2},\cdots ,W_{k}}

使得：
通過貝葉斯公式，上式可以覆寫為
由於對於確定的輸入串



O


{\displaystyle O}

，



P
(
O
)


{\displaystyle P(O)}

是確定的，因此省略它並不會影響上式的最終結果，因此，一般來說語音辨識所討論的問題可以用下面的公式來表示，可以將它稱為語音辨識的基本公式。




W
=
arg
⁡
max
P
(
O

|

W
)
P
(
W
)


{\displaystyle W=\arg \max P(O|W)P(W)}


從這個角度來看，訊號處理模組提供了對輸入訊號的預處理，也就是說，提供了從採集的語音訊號(記為



S


{\displaystyle S}

)到
特徵序列



O


{\displaystyle O}

的對映





O


:
S
→
O


{\displaystyle {\mathcal {O}}:S\rightarrow O}

。而聲學模型本身定義了一些更具推廣性的聲學建模單元





μ


=
{

u

1


,

u

2


,
⋯
,

u

m


}


{\displaystyle {\mathcal {\mu }}=\{u_{1},u_{2},\cdots ,u_{m}\}}

，並且提供了在給定輸入特徵下，估計



P
(
O

|


u

k


)


{\displaystyle P(O|u_{k})}

的方法。
為了將聲學模型建模單元串



U
=

u

1


,

u

2


,
⋯
,

u

l




{\displaystyle U=u_{1},u_{2},\cdots ,u_{l}}

對映到符號集





W




{\displaystyle {\mathcal {W}}}

，就需要發音詞典發揮作用。它實際上定義了對映





D


:
w
∈


W


→
U


{\displaystyle {\mathcal {D}}:w\in {\mathcal {W}}\rightarrow U}

的對映。為了表示方便，也可以定義一個由





W




{\displaystyle {\mathcal {W}}}

到



U


{\displaystyle U}

的全集





U




{\displaystyle {\mathcal {U}}}

的笛卡爾積，而發音詞典





D




{\displaystyle {\mathcal {D}}}

則是這個笛卡爾積的一個子集。並且有：
最後，語言模型則提供了



P
(
W
)


{\displaystyle P(W)}

。這樣，基本公式就可以更加具體的寫成：
對於解碼器來說，就是要在由





W




{\displaystyle {\mathcal {W}}}

,





μ




{\displaystyle {\mathcal {\mu }}}

,




u

i




{\displaystyle u_{i}}

以及時間標度



t


{\displaystyle t}

張成的搜尋空間中，找到上式所指明的



W


{\displaystyle W}

。
聲學特徵的提取與選擇是語音辨識的一個重要環節。聲學特徵的提取既是一個資訊大振幅壓縮的過程，也是一個訊號解卷過程，目的是使圖形劃分器能更好地劃分。
由於語音訊號的時變特性，特徵提取必須在一小段語音訊號上進行，也即進行短分時析。這一段被認為是平穩的分析區間稱之為影格，影格與影格之間的偏移通常取影格長的1/2或1/3。通常要對訊號進行預加重以提升高頻，對訊號加窗以避免短時語音段邊緣的影響。
MFCC的計算首先用FFT將時域訊號轉化成頻域，之後對其對數能量譜用依照Mel刻度分布的三角濾波器組進行卷積，最後對各個濾波器的輸出構成的向量進行離散餘弦變換DCT，取前N個係數。PLP仍用德賓法去計算LPC參數，但在計算自相關參數時用的也是對聽覺激勵的對數能量譜進行DCT的方法。
以國語發音為例，我們會將一個字的發音切割成兩個部分，分別是聲母(initials)與韻母(finals)。而在發音的過程之中，聲母轉變至韻母是一個漸進而非瞬間的改變，因此我使用右文相關聲韻母圖形（Right-Context-Dependent Initial Final, RCDIF）作為分析方法，可以更精準的辨識出正確的音節（syllable）。

而根據聲母的不同特徵，又可以將聲母分為下面四類：發音時嘴唇緊閉後，吐出氣流製造出類似爆破的聲音。其聲音震幅變化會先降至極小值後（代表嘴唇緊閉）後在急劇上升，而端視是否有持續送氣，倘若有持續送氣（aspirated），則震幅可能會有另一個波峰，若無（un-aspirated ）則在波峰之後，震幅將有所下降。如：ㄆ與ㄅ便是前述的關係，ㄆ有持續送氣，而ㄅ則無。右圖左為ㄅ，右圖右為ㄆ。

發音時，舌頭緊貼硬顎，形成狹窄的通道，氣流通過時造成湍流發生摩擦，由此發出聲響。由於摩擦音是透過穩定輸出氣流，使得聲音震幅變化相較於爆破音變化振幅較小。如ㄏ、ㄒ 等皆為摩擦音。
此類型的發聲模型兼具爆破音與摩擦音的發聲特性。其主要發聲構造如同摩擦音是由舌頭緊貼硬顎使氣流通過時產生摩擦的聲音。而其通道更加緊密，使得氣流會在瞬間衝出，產生出如同爆破音般的特徵。如：ㄑ 、ㄔ等。
發音時，軟顎會下壓，下壓後，由氣管吐出的氣流被阻塞，無法進入口腔，因而轉往鼻腔。也因此鼻腔與口腔會產生共振，如右圖的時頻譜上可以明顯地看到零點(formants)分布有共振的現象，而這樣的共振現象在右文相關聲韻母圖形（Right-Context-Dependent Initial Final, RCDIF）下與韻母倆相對較下更加明顯。因此，此一現象可作為辨識鼻音（Nasal）的重要依據之一。右圖便為鼻音ㄋ之特徵，其中紅點便為零點（formants）
而韻母又有雙母音、單母音之分，端視再發生時是否有音調的改變。而根據聲帶振動與否，又分為清音（unvoiced：聲帶不震動）等差異，以上發音時不同的方式，在時頻圖上大多可以找到相對應的特徵，透過處理二維的時頻圖，藉由傳統影像處理的方式，達到語音辨識的目的。
語音辨識系統的模型通常由聲學模型和語言模型兩部封包成，分別對應於語音到音節概率的計算和音節到字概率的計算。本節和下一節分別介紹聲學模型和語言模型方面的技術。
HMM聲學建模：馬爾可夫模型的概念是一個離散時域有限狀態自動機，隱馬爾可夫模型HMM是指這一馬爾可夫模型的內部狀態外界不可見，外界只能看到各個時刻的輸出值。對語音辨識系統，輸出值通常就是從各個影格計算而得的聲學特徵。用HMM刻畫語音訊號需作出兩個假設，一是內部狀態的轉移只與上一狀態有關，另一是輸出值只與目前狀態（或目前的狀態轉移）有關，這兩個假設大大降低了模型的複雜度。HMM的評估、解碼和訓練相應的演算法是前向演算法、Viterbi演算法和前向後向演算法。 
語音辨識中使用HMM通常是用從左向右單向、帶自環、帶跨越的拓撲結構來對辨識基元建模，一個音素就是一個三至五狀態的HMM，一個詞就是構成詞的多個音素的HMM序列起來構成的HMM，而連續語音辨識的整個模型就是詞和靜音組合起來的HMM。 
上下文相關建模：協同發音，指的是一個音受前後相鄰音的影響而發生變化，從發聲機理上看就是人的發聲器官在一個音轉向另一個音時其特性只能漸變，從而使得後一個音的頻譜與其他條件下的頻譜產生差異。上下文相關建模方法在建模時考慮了這一影響，從而使模型能更準確地描述語音，只考慮前一音的影響的稱為Bi-Phone，考慮前一音和後一音的影響的稱為Tri-Phone。
英語的上下文相關建模通常以音素為基元，由於有些音素對其後音素的影響是相似的，因而可以通過音素解碼狀態的聚類進行模型參數的共享。聚類的結果稱為senone。決策樹用來實現高效的triphone對senone的對應，通過回答一系列前後音所屬類別（元/輔音、清/濁音等等）的問題，最終確定其HMM狀態應使用哪個senone。分類回歸樹CART模型用以進行詞到音素的發音標註。
語言模型主要分為規則模型和統計模型兩種。統計語言模型是用概率統計的方法來揭示語言單位內在的統計規律，其中n元語法簡單有效，被廣泛使用。
n元語法：該模型基於這樣一種假設，第n個詞的出現只與前面N-1個詞相關，而與其它任何詞都不相關，整句的概率就是各個詞出現概率的乘積。這些概率可以通過直接從語料中統計N個詞同時出現的次數得到。由於計算量太大，N一般取值不會很大，常用的是二元語法（Bi-Gram）和三元語法（Tri-Gram）。
語言模型的效能通常用交叉熵和複雜度（Perplexity）來衡量。交叉熵的意義是用該模型對文字辨識的難度，或者從壓縮的角度來看，每個詞平均要用幾個位來編碼。複雜度的意義是用該模型表示這一文字平均的分支數，其倒數可視為每個詞的平均概率。平滑是指對沒觀察到的N元組合賦予一個概率值，以保證詞序列總能通過語言模型得到一個概率值。通常使用的平滑技術有圖靈估計、刪除插值平滑、Katz平滑和Kneser-Ney平滑。
連續語音辨識中的搜尋，就是尋找一個詞模型序列以描述輸入語音訊號，從而得到詞解碼序列。搜尋所依據的是對公式中的聲學模型打分和語言模型打分。在實際使用中，往往要依據經驗給語言模型加上一個高權重，並設定一個長詞懲罰分數。
Viterbi：基於動態規劃的Viterbi演算法在每個時間點上的各個狀態，計算解碼狀態序列對觀察序列的後驗概率，保留概率最大的路徑，並在每個節點記錄下相應的狀態資訊以便最後反向取得詞解碼序列。Viterbi演算法在不喪失最佳解的條件下，同時解決了連續語音辨識中HMM模型狀態序列與聲學觀察序列的非線性時間對準、詞邊界檢測和詞的辨識，從而使這一演算法成為語音辨識搜尋的基本策略。
由於語音辨識對目前時間點之後的情況無法預測，基於目標函式的啟發式剪枝難以應用。由於Viterbi演算法的時齊特性，同一時刻的各條路徑對應於同樣的觀察序列，因而具有可比性，束Beam搜尋在每一時刻只保留概率最大的前若干條路徑，大振幅的剪枝提高了搜尋的效率。這一時齊Viterbi-Beam演算法是目前語音辨識搜尋中最有效的演算法。 N-best搜尋和多遍搜尋：為在搜尋中利用各種知識源，通常要進行多遍搜尋，第一遍使用代價低的知識源，產生一個候選列表或詞候選網格，在此基礎上進行使用代價高的知識源的第二遍搜尋得到最佳路徑。此前介紹的知識源有聲學模型、語言模型和音標詞典，這些可以用於第一遍搜尋。為實現更進階的語音辨識或口語理解，往往要利用一些代價更高的知識源，如4階或5階的N-Gram、4階或更高的上下文相關模型、詞間相關模型、分段模型或語法分析，進行重新打分。最新的即時大詞表連續語音辨識系統許多都使用這種多遍搜尋策略。
N-best搜尋產生一個候選列表，在每個節點要保留N條最好的路徑，會使計算複雜度增加到N倍。簡化的做法是只保留每個節點的若干詞候選，但可能遺失次優候選。一個折衷辦法是只考慮兩個詞長的路徑，保留k條。詞候選網格以一種更緊湊的方式給出多候選，對N-best搜尋演算法作相應改動後可以得到生成候選網格的演算法。
前向後向搜尋演算法是一個應用多遍搜尋的例子。當應用簡單知識源進行了前向的Viterbi搜尋後，搜尋過程中得到的前向概率恰恰可以用在後向搜尋的目標函式的計算中，因而可以使用啟發式的A演算法進行後向搜尋，經濟地搜尋出N條候選。
語音辨識系統選擇辨識基元的要求是，有準確的定義，能得到足夠資料進行訓練，具有一般性。英語通常採用上下文相關的音素建模，漢語的協同發音不如英語嚴重，可以採用音節建模。系統所需的訓練資料大小與模型複雜度有關。模型設計得過於複雜以至於超出了所提供的訓練資料的能力，會使得效能急劇下降。
聽寫機：大詞彙量、非特定人、連續語音辨識系統通常稱為聽寫機。其架構就是建立在前述聲學模型和語言模型基礎上的HMM拓撲結構。訓練時對每個基元用前向後向演算法獲得模型參數，辨識時，將基元串接成詞，詞間加上靜音模型並引入語言模型作為詞間轉移概率，形成迴圈結構，用Viterbi演算法進行解碼。針對漢語易於分割的特點，先進行分割再對每一段進行解碼，是用以提高效率的一個簡化方法。
對話系統：用於實現人機口語對話的系統稱為對話系統。受目前技術所限，對話系統往往是面向一個狹窄領域、詞彙量有限的系統，其題材有旅遊查詢、訂票、資料庫檢索等等。其前端是一個語音辨識器，辨識產生的N-best候選或詞候選網格，由語法剖析器進行分析取得語意資訊，再由對話管理器確定應答資訊，由語音合成器輸出。由於目前的系統往往詞彙量有限，也可以用提取關鍵詞的方法來取得語意資訊。
語音辨識系統的效能受許多因素的影響，包括不同的說話人、說話方式、環境噪音、傳輸通道等等。提高系統強健性，是要提高系統克服這些因素影響的能力，使系統在不同的應用環境、條件下效能穩定；自適應的目的，是根據不同的影響來源，自動地、有針對性地對系統進行調整，在使用中逐步提高效能（其中以李開復博士的不特定語音辨識系統為例）。以下對影響系統效能的不同因素分別介紹解決辦法。
解決辦法按針對語音特徵的方法（以下稱特徵方法）和模型調整的方法（以下稱模型方法）分為兩類。前者需要尋找更好的、高強健性的特徵參數，或是在現有的特徵參數基礎上，加入一些特定的處理方法。後者是利用少量的自適應語料來修正或變換原有的說話人無關（SI）模型，從而使其成為說話人自適應（SA）模型。
說話人自適應的特徵方法有說話人規一化和說話人子空間法，模型方法有貝葉斯方法、變換法和模型合併法。
語音系統中的雜訊，包括環境雜訊和錄音過程加入的電子雜訊。提高系統魯棒性的特徵方法包括語音增強和尋找對雜訊干擾不敏感的特徵，模型方法有並列模型組合PMC方法和在訓練中人為加入雜訊。通道畸變包括錄音時話筒的距離、使用不同靈敏度的話筒、不同增益的前置放大和不同的濾波器設計等等。特徵方法有從倒譜向量中減去其長時平均值和RASTA濾波，模型方法有倒譜平移。
最大後驗機率估計是後驗機率分布的眾數。利用最大後驗機率估計可以獲得對實驗資料中無法直接觀察到的量的點估計。它與最大似然估計中的經典方法有密切關係，但是它使用了一個增廣的最佳化目標，進一步考慮了被估計量的先驗機率分布。所以最大後驗機率估計可以看作是規則化的最大似然估計。
以此為基礎的自適性方法有以下特性：
最大似然線性回歸（Maximum Likelihood Linear Regression(MLLR) ）是一種基於詞網的最大似然線性回歸(Lattice-MLLR)無監督自適應演算法,並進行了改進。是一種基於變換的方法，對資料量依賴較小，常用於資料量較少的情況或進行快速自適應。
一種基於詞網的最大似然線性回歸(Lattice-MLLR)無監督自適應演算法,並進行了改進。 Lattice-MLLR是根據解碼得到的詞網估計MLLR變換參數,詞網的潛在誤識率遠小於識別結果,因此可以使參數估計更為準確。 Lattice-MLLR的一個很大的缺點是計算量極大,較難實用。MLLR 是一種基於變換的方法，對資料量依賴較小，常用於資料量較少的情況或進行快速自適應。
以此為基礎的自適性方法有以下特性：
而最大似然線性回歸（Maximum Likelihood Linear Regression(MLLR) ）也有許多變形。其中區塊對角最大似然線性回歸（block-diagonal Maximum Likelihood Linear Regression(MLLR)）可以再更少量的調整測資下提升更大的精準度，然而其進入準度的飽和狀態也更快，精準度上限也更低。
綜合以上，端視調整測資（adaptation data）的多寡，可以選擇適當的方法，讓模型的精準度最高。
手寫辨識（英語：Handwriting recognition）是電腦在紙、相片、觸控式螢幕或其他裝置中接收並辨識人手寫的文字等資訊的技術，主要應用於光學字元辨識（OCR）。
離線手寫辨識涉及到將圖像中的文字自動轉換成是電腦可以使用的字元代碼。離線手寫辨識是比較困難的，因為不同的人有不同的書寫風格。離線手寫辨識主要應用在列印出來的文字辨識上。
常常使用縮小辨識範圍，例如郵政編碼只包含1~9的數位，辨識這種數位可以減少錯誤的可能。
主要的技術：
離線字元辨識往往涉及掃描過去寫的表格或文件。這意味著該裝置或軟體需要將掃描的圖像中所包含的單個字元提取出來。然而，在這一步中有幾種常見的缺陷。其中最常見的是將多個相連的字元當作為單個字元分離出來。這增加了辨識的難度，但現在許多軟體已經開始適應這種問題。
當單個字元的提取出來後，辨識引擎開始計算其對應的電腦字元。現在有幾種不同的辨識技術。
除了人工神經網路外，程式設計師有時必須手動確定他們感覺很重要的屬性。
這些屬性可能是：
這種方法可以提高辨識的準確性，但需要花費更多的研發時間。
線上手寫辨識可以分解為幾個通用的步驟:
預處理的目的是摒棄無關的輸入資料,可以減少負面的影響。這涉及到速度和準確性。通常由圖像二值化、 正常化、 採樣、 平滑、去噪預處理等組成。
早在20世紀80年代，就有人提出在商業產品中將手寫體辨識作為鍵盤輸入的一種替代方式。
雖然公眾已經習慣將手寫辨識看作一種輸入方式，但在桌上型電腦或筆記型電腦中並沒有得到廣泛的使用。鍵盤仍被普遍認為是速度更快，更可靠的輸入方式。截至2006年，許多掌上型電腦提供手寫輸入，但精確度仍是一個問題，有的人還認為螢幕鍵盤更有效率。
手寫辨識有活躍的社區和眾多研究它的學者。現在較大的手寫辨識會議有「ICFHR」和「ICDAR」。
活躍的研究領域包括：
戰略遊戲（也叫策略遊戲）是一種廣泛存在於圖板遊戲、電視遊戲和電腦遊戲的遊戲形式。它要求遊戲的參與者「擁有」做出決策的能力。在戰略遊戲中，決策對遊戲的結果產生至關重要的影響。戰略通常是與運氣相對，然而，很多遊戲既包含戰略成分又包含運氣成分，這給戰略遊戲的劃分帶來一定的困難。因此，我們可以用遊戲的戰略成分來描述這個遊戲。
按照對現實世界的依賴程度，可以分為抽象策略遊戲和模擬戰略遊戲。抽象策略遊戲與現實世界的關係不大，是一種基於邏輯的遊戲，這種遊戲通常有遊戲參與者必須遵守的簡明的遊戲規則。著名的抽象策略遊戲有中國象棋、西洋棋和圍棋等，它們流傳千百年，至今經久不衰。
而模擬戰略遊戲則將遊戲的重點放在對現實世界的模擬上。（由於需要對現實世界進行模擬，因此該類遊戲通常為電腦遊戲）。在這類遊戲中，參與者的每一個決策，都將影射到現實世界中的決策中去。然而，就象前面劃分戰略和運氣一樣，抽象戰略遊戲和模擬戰略遊戲也不是涇渭分明的，我們通常用遊戲的抽象成分來描述這個戰略遊戲。
依照按排決策進行順序的方式，可以分為即時戰略遊戲和回合制戰略遊戲，在即時戰略遊戲，所有的決策都是即時進行的，即：遊戲是連續的，你可以在遊戲進行中的任何時間做出並完成決策。而回合制戰略遊戲則相反，遊戲是基於回合的。在回合制戰略遊戲中，參與者要依照遊戲規則輪流做出決策，只有當一方完成決策後，其他參與者才能進行決策。大部分非電腦遊戲都是回合制戰略遊戲，然而也有極少數的非電腦戰略遊戲是即時戰略的，如Icehouse。
機器人（英語：Robot）包括一切類比人類行為或思想與類比其他生物的機械（如機器狗，機器貓等）。狹義上對機器人的定義還有很多分類法及爭議，有些電腦程式甚至也被稱為機器人。在當代工業中，機器人指能自動執行任務的人造機器裝置，用以取代或協助人類工作，一般會是機電裝置，由電腦程式或是電子電路控制。
機器人的範圍很廣，可以是自主或是半自主的，可以從本田技研工業的ASIMO或是TOSY（英語：TOSY）的TOPIO（英語：TOPIO）等擬人機器人到工業機器人，也包括多台一起動作的群機器人（英語：Swarm robotics），其至是奈米機器人。藉由模仿逼真的外觀及自動化的動作，理想中的高仿真機器人是進階整合控制論、機械電子、電腦與人工智慧、材料學和仿生學的產物，目前科學界正在向此方向研究開發。有關機器人的話題，常見於科幻作品中。
機器人學是有關機器人設計、組裝、運作及應用的技術研究[1]，以及控制機器人的電腦系統、感測器回授以及資訊處理等。機器人可以代替人類在一些危險的環境或是製造程式中工作，或是在外貌、行為或認知上取代人類。許多機器的概念都來自自然界，因此有仿生機器人學的出現。
在工業時代機械技術提昇後，像自動化裝置、遙控甚至無線遙控也日益成熟，電子學的進展成為機器人發展的動力。第一個電子式自動機是於1948年在英國的布里斯托由William Grey Walter發明，第一個數位化，由電腦控制的自動機是在1954年由George Devol發明，命名為Unimate，後續在1961年賣給奇異電氣，用在紐澤西州的工廠中，用來將壓鑄裝置中的熱金屬上移[2]。
機器人可以作一些重複性高或是危險，人類不想做的工作，也可以做一些因為尺寸限制，人類無法作的工作，甚至是像外太空或是深海中，不適人類生存的環境[3]。 社會上對越來越多的機器人及其角色有些疑慮，機器人因為在越來越多方面可以取代人類，因此被認為是增加失業人口的主因之一[4]。戰爭中使用的機器人也有道德上的疑慮。機器人自主的可能性及其影響是科幻小說的主題之一，以後也可能變成實際會發生的問題。
機器人（自動控制機器）一詞，最早出現在西元1920年捷克科幻作家恰配克的《羅索姆的萬能機器人》中[5]，原文作「Robota」，後來成為西文中通行的「Robot」。但是，作品中登場的並非金屬製的機械，而是將原生質以化學合成製作，具有類似人類外形的人造人，即現在SF作品中的人形機器人，其概念來自泥人傳說[6]。
1967年日本科學家森政弘與合田周平提出：「機器人是一種具有移動性、個體性、智慧型性、通用性、半機械半人性、自動性、奴隸性等7個特徵的柔性機器。[7]」
現今，對人類來說，太髒太累、太危險、太精細、太粗重或太反覆無聊的工作，常常由機器人代勞。從事製造業的工廠裡的生產線就應用了很多工業機器人，其他應用領域還包括：射出成型業、建築業、石油鑽探、礦石開採、太空探索、水下探索、毒害物質清理、搜救、醫學、軍事領域等。
指由操作機（機械本體）、控制器、伺服驅動系統和傳感裝置構成的一種仿人操作、自動控制、可重複編程、能在三維空間完成各種作業的光機電一體化生產裝置，特別適合於多品種、變批次的彈性製造系統。
一個工業機器人可以僅包括一個感覺與動作之間的連結，而且這個連結不是由人手動操控的。機器人的動作也許是電動機或是驅動器（也稱效應器）移動一隻手臂，張開或關閉一個夾子的動作。此種直接而詳盡的控制跟回饋也許是由在外部或是嵌入式的電腦或是微控制器上運行的程式提供。根據這個定義，所有的自動裝置都算機器人。
工業機器人可直接接受人類指令，也可以執行預先編排的程式，也可以根據以人工智慧技術制定的原則綱領行動。
工業機器人發展現狀方面，
2007年全球共新安裝工業機器人114,365台，較2006年新安裝的111,052台，上升了3%。截至2007年底，全球工業機器人保有量已達到了995,000台。2007年，亞洲及美洲工業機器人的裝配量明顯上升，汽車工業以及電子電器行業的發展是上述地區工業機器人裝配量強勁增長的主要因素。此外，化工領域用工業機器人的需求量也迅速上升。
焊接機器人是工業機器人的最常見類型，常用於汽車製造機械流水線的規模化製造中，汽車車身和其他採用焊接工藝的部件的焊接。
塗裝機器人亦是工業機器人的最常見類型，常用於汽車車身塗上烤漆。
戰鬥機器人研發方面走在前列的國家包括美國與以色列，如果不將全球各種正在服役的無人飛機包含在內的話，比較典型的案例有DRDO（Defence Research and Development Organisation）公司Daksh，iRobot公司的PackBot，福斯特-米勒公司的「魔爪」，以色列USV（Unmanned Security Vehicle）公司的Guardium，韓國三星公司的SGR-A1等。
目前戰鬥機器人已經被應用於阿富汗，巴以衝突等局部戰爭中，比較常見的任務包括偵察，排雷等，這種機器人往往非常靈活，可以穿越複雜地形，如美國波士頓公司的BigDog和阿特拉斯，部分型號的機器人裝備了機槍等攻擊性武器。
通常用於探索人類難以安全接近或根本無法到達的地方。有水下機器人、地外探測機器人（勇氣號、機遇號）、洞穴/密室探索機器人、火山研究機器人、太空探索機器人等等類型。
有些人類會通過手術、將自己的意識輸入進電腦等方式改造成為機器人，用於維護治安、軍事戰鬥等用途。
機器人也可以作為娛樂玩具用途，甚至成為人類生活的寵物和伴侶。台灣極趣科技股份有限公司推出的「BeRobot人型機器人」[8] 以及日本索尼公司推出的「Aibo」機器寵物就是實際案例。有些日本的地區已經使用了接待用的兒童體型機器人。
在青少年流行文化中，機器人題材自幾十年前就開始在世界範圍內盛行。《鐵臂阿童木》、《哆啦A夢》、《變形金剛》、《機動戰士高達》等機器人動畫將此題材推向高峰。
這些作品通常將機器人描畫為具有人類軀幹特徵（甚至感情）的金屬人，並以其強勁的能力作戰。
參見：人型機器人
有些機器人被開發出來純粹是以模仿真人作為目的，這些模仿既可以是外觀與動作行為上，又可以是思想感情上的。理論上講，要做出外觀、行為、思想都非常接近真人的機器人，在目前還有不可跨越的技術難度，但在未來並不是不可能的事。而如何利用及控制那類高仿真機器人，它們與人類關係又將如何，早已成為科幻界一個長期話題。
2001年，美國麻省理工學院研發了世界上第一個有類比感情的機器人[9]。
2007年時機器人中有大約一半是在亞洲、32%在歐洲、16%在北美、1%在澳大拉西亞，1%在非洲[11]，當時世界上40%的機器人在日本[12]，因此讓日本成為世界機器人最多的國家。
隨著機器人越來越複雜，專家及學者開始關注機器人的行為需符合哪一種倫理學[13]，以及哪一種機器人有資格擁有社會、文化、道德或是法律上的權利[14]。有一些科學組織宣稱在2019年可能就會有機器人的大腦[15]。其他人預測機器人的智慧型在2050會有突破性的進展[16]。最近的進展已經讓機器人的行為變成更加複雜[17]。2010年有一部名為《插頭與禱告（英語：Plug & Pray）》的紀錄片，其中一個主題就是智慧型機器人對社會的衝擊[18]。
弗諾·文奇認為有一天電腦和機器人會比人更聰明，他稱之為「奇異點」[19]。他認為那時對人類會有某種程度的危險，也可能相當危險[20]，在一種稱為奇點主義（英語：Singularitarianism）的哲學中會探討這個議題。
有些專家及學者質疑在戰爭中是否可以使用機器人，特別是有自主功能的機器人[21]。也有一些關注是有關可以讓軍事機器人受另一個機器人控制的技術[22]。美國海軍資助的一個計劃提出，隨著軍事機器人越來越複雜，應該更重視其能力對作出自主決定的影響[23][24]。有一個研究者認為自主機器人會更加有人性，因此可以更有效的作決定，但也有研究者質疑上述的想法[25]。
工業機器人的引進有可能會和失業有關，像台灣廠商富士康在2011年7月起就提出一個三年計劃，要用更多的機器人代替工廠的人力。當時工廠有使用一萬台機器人，但在三年後要增加到一百萬台[26]。
世界機器人博覽會（IREX）是世界上最大的機器人貿易展覽會[27]，第一次是在1973年在日本東京舉行，之後每二年舉行一次[27]。
科幻小說中對機器人行為的描述，以科幻小說家以薩·艾西莫夫在小說《我，機器人》中所訂立的「機器人三定律」最為著名。
艾西莫夫為機器人提出的三條「定律」（law），程式上規定所有機器人必須遵守：
「機器人三定律」的目的是為了保護人類不受傷害，但艾西莫夫在小說中也探討了在不違反三定律的前提下傷害人類的可能性，甚至在小說中不斷地挑戰這三定律，在看起來完美的定律中找到許多漏洞。在現實中，「三定律」成為機械倫理學的基礎。
